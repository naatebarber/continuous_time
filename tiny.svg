<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="613.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="1877"><g><title>tiny`serde_json::de::from_slice (2 samples, 0.11%)</title><rect x="0.0000%" y="421" width="0.1066%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="431.50"></text></g><g><title>tiny`serde_json::de::from_trait (2 samples, 0.11%)</title><rect x="0.0000%" y="405" width="0.1066%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="415.50"></text></g><g><title>tiny`tiny::api::_::_&lt;impl serde::de::Deserialize for tiny::api::StepFrame&gt;::deserialize (2 samples, 0.11%)</title><rect x="0.0000%" y="389" width="0.1066%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="2"/><text x="0.2500%" y="399.50"></text></g><g><title>tiny`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (2 samples, 0.11%)</title><rect x="0.0000%" y="373" width="0.1066%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="2"/><text x="0.2500%" y="383.50"></text></g><g><title>tiny`&lt;tiny::api::_::&lt;impl serde::de::Deserialize for tiny::api::StepFrame&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.11%)</title><rect x="0.0000%" y="357" width="0.1066%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="2"/><text x="0.2500%" y="367.50"></text></g><g><title>tiny`serde::de::MapAccess::next_key (2 samples, 0.11%)</title><rect x="0.0000%" y="341" width="0.1066%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="2"/><text x="0.2500%" y="351.50"></text></g><g><title>tiny`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.11%)</title><rect x="0.0000%" y="325" width="0.1066%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="2"/><text x="0.2500%" y="335.50"></text></g><g><title>tiny`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.11%)</title><rect x="0.0000%" y="309" width="0.1066%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="2"/><text x="0.2500%" y="319.50"></text></g><g><title>tiny`&lt;tiny::api::_::&lt;impl serde::de::Deserialize for tiny::api::StepFrame&gt;::deserialize::__Field as serde::de::Deserialize&gt;::deserialize (2 samples, 0.11%)</title><rect x="0.0000%" y="293" width="0.1066%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="2"/><text x="0.2500%" y="303.50"></text></g><g><title>tiny`&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_identifier (1 samples, 0.05%)</title><rect x="0.0533%" y="277" width="0.0533%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.3033%" y="287.50"></text></g><g><title>tiny`&lt;serde_json::de::MapKey&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.05%)</title><rect x="0.0533%" y="261" width="0.0533%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.3033%" y="271.50"></text></g><g><title>tiny`&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.05%)</title><rect x="0.0533%" y="245" width="0.0533%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="0.3033%" y="255.50"></text></g><g><title>tiny`serde_json::read::SliceRead::parse_str_bytes (1 samples, 0.05%)</title><rect x="0.0533%" y="229" width="0.0533%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="0.3033%" y="239.50"></text></g><g><title>tiny`core::ops::function::FnOnce::call_once (1 samples, 0.05%)</title><rect x="0.0533%" y="213" width="0.0533%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="1"/><text x="0.3033%" y="223.50"></text></g><g><title>tiny`serde_json::read::as_str (1 samples, 0.05%)</title><rect x="0.0533%" y="197" width="0.0533%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="1"/><text x="0.3033%" y="207.50"></text></g><g><title>tiny`core::str::converts::from_utf8 (1 samples, 0.05%)</title><rect x="0.0533%" y="181" width="0.0533%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="1"/><text x="0.3033%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.11%)</title><rect x="0.1066%" y="405" width="0.1066%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="2"/><text x="0.3566%" y="415.50"></text></g><g><title>tiny`&lt;f64 as core::ops::arith::Mul&lt;&amp;f64&gt;&gt;::mul (4 samples, 0.21%)</title><rect x="0.2131%" y="405" width="0.2131%" height="15" fill="rgb(210,31,41)" fg:x="4" fg:w="4"/><text x="0.4631%" y="415.50"></text></g><g><title>tiny`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2 samples, 0.11%)</title><rect x="0.4262%" y="405" width="0.1066%" height="15" fill="rgb(221,200,47)" fg:x="8" fg:w="2"/><text x="0.6762%" y="415.50"></text></g><g><title>tiny`std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (1 samples, 0.05%)</title><rect x="0.5328%" y="405" width="0.0533%" height="15" fill="rgb(226,26,5)" fg:x="10" fg:w="1"/><text x="0.7828%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.11%)</title><rect x="1.4385%" y="389" width="0.1066%" height="15" fill="rgb(249,33,26)" fg:x="27" fg:w="2"/><text x="1.6885%" y="399.50"></text></g><g><title>tiny`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::get (16 samples, 0.85%)</title><rect x="1.7581%" y="373" width="0.8524%" height="15" fill="rgb(235,183,28)" fg:x="33" fg:w="16"/><text x="2.0081%" y="383.50"></text></g><g><title>tiny`&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (61 samples, 3.25%)</title><rect x="1.5450%" y="389" width="3.2499%" height="15" fill="rgb(221,5,38)" fg:x="29" fg:w="61"/><text x="1.7950%" y="399.50">tin..</text></g><g><title>tiny`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (41 samples, 2.18%)</title><rect x="2.6105%" y="373" width="2.1843%" height="15" fill="rgb(247,18,42)" fg:x="49" fg:w="41"/><text x="2.8605%" y="383.50">t..</text></g><g><title>tiny`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="4.7949%" y="389" width="0.0533%" height="15" fill="rgb(241,131,45)" fg:x="90" fg:w="1"/><text x="5.0449%" y="399.50"></text></g><g><title>tiny`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.05%)</title><rect x="4.8482%" y="181" width="0.0533%" height="15" fill="rgb(249,31,29)" fg:x="91" fg:w="1"/><text x="5.0982%" y="191.50"></text></g><g><title>tiny`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.11%)</title><rect x="4.8482%" y="197" width="0.1066%" height="15" fill="rgb(225,111,53)" fg:x="91" fg:w="2"/><text x="5.0982%" y="207.50"></text></g><g><title>tiny`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.05%)</title><rect x="4.9014%" y="181" width="0.0533%" height="15" fill="rgb(238,160,17)" fg:x="92" fg:w="1"/><text x="5.1514%" y="191.50"></text></g><g><title>tiny`core::hash::sip::u8to64_le (1 samples, 0.05%)</title><rect x="4.9547%" y="117" width="0.0533%" height="15" fill="rgb(214,148,48)" fg:x="93" fg:w="1"/><text x="5.2047%" y="127.50"></text></g><g><title>tiny`core::hash::BuildHasher::hash_one (4 samples, 0.21%)</title><rect x="4.8482%" y="213" width="0.2131%" height="15" fill="rgb(232,36,49)" fg:x="91" fg:w="4"/><text x="5.0982%" y="223.50"></text></g><g><title>tiny`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.11%)</title><rect x="4.9547%" y="197" width="0.1066%" height="15" fill="rgb(209,103,24)" fg:x="93" fg:w="2"/><text x="5.2047%" y="207.50"></text></g><g><title>tiny`core::hash::impls::_&lt;impl core::hash::Hash for *const T&gt;::hash (2 samples, 0.11%)</title><rect x="4.9547%" y="181" width="0.1066%" height="15" fill="rgb(229,88,8)" fg:x="93" fg:w="2"/><text x="5.2047%" y="191.50"></text></g><g><title>tiny`core::hash::Hasher::write_usize (2 samples, 0.11%)</title><rect x="4.9547%" y="165" width="0.1066%" height="15" fill="rgb(213,181,19)" fg:x="93" fg:w="2"/><text x="5.2047%" y="175.50"></text></g><g><title>tiny`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.11%)</title><rect x="4.9547%" y="149" width="0.1066%" height="15" fill="rgb(254,191,54)" fg:x="93" fg:w="2"/><text x="5.2047%" y="159.50"></text></g><g><title>tiny`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.11%)</title><rect x="4.9547%" y="133" width="0.1066%" height="15" fill="rgb(241,83,37)" fg:x="93" fg:w="2"/><text x="5.2047%" y="143.50"></text></g><g><title>tiny`core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.05%)</title><rect x="5.0080%" y="117" width="0.0533%" height="15" fill="rgb(233,36,39)" fg:x="94" fg:w="1"/><text x="5.2580%" y="127.50"></text></g><g><title>tiny`core::ub_checks::is_nonoverlapping::runtime (1 samples, 0.05%)</title><rect x="5.0080%" y="101" width="0.0533%" height="15" fill="rgb(226,3,54)" fg:x="94" fg:w="1"/><text x="5.2580%" y="111.50"></text></g><g><title>tiny`core::core_arch::aarch64::neon::vld1_u8 (1 samples, 0.05%)</title><rect x="5.0613%" y="181" width="0.0533%" height="15" fill="rgb(245,192,40)" fg:x="95" fg:w="1"/><text x="5.3113%" y="191.50"></text></g><g><title>tiny`core::ptr::read_unaligned (1 samples, 0.05%)</title><rect x="5.0613%" y="165" width="0.0533%" height="15" fill="rgb(238,167,29)" fg:x="95" fg:w="1"/><text x="5.3113%" y="175.50"></text></g><g><title>tiny`core::ub_checks::is_nonoverlapping::runtime (1 samples, 0.05%)</title><rect x="5.0613%" y="149" width="0.0533%" height="15" fill="rgb(232,182,51)" fg:x="95" fg:w="1"/><text x="5.3113%" y="159.50"></text></g><g><title>tiny`core::iter::traits::iterator::Iterator::for_each (6 samples, 0.32%)</title><rect x="4.8482%" y="357" width="0.3197%" height="15" fill="rgb(231,60,39)" fg:x="91" fg:w="6"/><text x="5.0982%" y="367.50"></text></g><g><title>tiny`&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.32%)</title><rect x="4.8482%" y="341" width="0.3197%" height="15" fill="rgb(208,69,12)" fg:x="91" fg:w="6"/><text x="5.0982%" y="351.50"></text></g><g><title>tiny`&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.32%)</title><rect x="4.8482%" y="325" width="0.3197%" height="15" fill="rgb(235,93,37)" fg:x="91" fg:w="6"/><text x="5.0982%" y="335.50"></text></g><g><title>tiny`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (6 samples, 0.32%)</title><rect x="4.8482%" y="309" width="0.3197%" height="15" fill="rgb(213,116,39)" fg:x="91" fg:w="6"/><text x="5.0982%" y="319.50"></text></g><g><title>tiny`&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold::_{{closure}} (6 samples, 0.32%)</title><rect x="4.8482%" y="293" width="0.3197%" height="15" fill="rgb(222,207,29)" fg:x="91" fg:w="6"/><text x="5.0982%" y="303.50"></text></g><g><title>tiny`core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (6 samples, 0.32%)</title><rect x="4.8482%" y="277" width="0.3197%" height="15" fill="rgb(206,96,30)" fg:x="91" fg:w="6"/><text x="5.0982%" y="287.50"></text></g><g><title>tiny`tiny::network::Network::backward::_{{closure}}::_{{closure}} (6 samples, 0.32%)</title><rect x="4.8482%" y="261" width="0.3197%" height="15" fill="rgb(218,138,4)" fg:x="91" fg:w="6"/><text x="5.0982%" y="271.50"></text></g><g><title>tiny`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (6 samples, 0.32%)</title><rect x="4.8482%" y="245" width="0.3197%" height="15" fill="rgb(250,191,14)" fg:x="91" fg:w="6"/><text x="5.0982%" y="255.50"></text></g><g><title>tiny`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (6 samples, 0.32%)</title><rect x="4.8482%" y="229" width="0.3197%" height="15" fill="rgb(239,60,40)" fg:x="91" fg:w="6"/><text x="5.0982%" y="239.50"></text></g><g><title>tiny`hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (2 samples, 0.11%)</title><rect x="5.0613%" y="213" width="0.1066%" height="15" fill="rgb(206,27,48)" fg:x="95" fg:w="2"/><text x="5.3113%" y="223.50"></text></g><g><title>tiny`hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.11%)</title><rect x="5.0613%" y="197" width="0.1066%" height="15" fill="rgb(225,35,8)" fg:x="95" fg:w="2"/><text x="5.3113%" y="207.50"></text></g><g><title>tiny`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1 samples, 0.05%)</title><rect x="5.1145%" y="181" width="0.0533%" height="15" fill="rgb(250,213,24)" fg:x="96" fg:w="1"/><text x="5.3645%" y="191.50"></text></g><g><title>tiny`hashbrown::map::equivalent_key::_{{closure}} (1 samples, 0.05%)</title><rect x="5.1145%" y="165" width="0.0533%" height="15" fill="rgb(247,123,22)" fg:x="96" fg:w="1"/><text x="5.3645%" y="175.50"></text></g><g><title>tiny`core::ptr::const_ptr::_&lt;impl core::cmp::PartialEq for *const T&gt;::eq (1 samples, 0.05%)</title><rect x="5.1145%" y="149" width="0.0533%" height="15" fill="rgb(231,138,38)" fg:x="96" fg:w="1"/><text x="5.3645%" y="159.50"></text></g><g><title>tiny`&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (7 samples, 0.37%)</title><rect x="4.8482%" y="389" width="0.3729%" height="15" fill="rgb(231,145,46)" fg:x="91" fg:w="7"/><text x="5.0982%" y="399.50"></text></g><g><title>tiny`tiny::network::Network::backward::_{{closure}} (7 samples, 0.37%)</title><rect x="4.8482%" y="373" width="0.3729%" height="15" fill="rgb(251,118,11)" fg:x="91" fg:w="7"/><text x="5.0982%" y="383.50"></text></g><g><title>tiny`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.05%)</title><rect x="5.1678%" y="357" width="0.0533%" height="15" fill="rgb(217,147,25)" fg:x="97" fg:w="1"/><text x="5.4178%" y="367.50"></text></g><g><title>tiny`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.05%)</title><rect x="5.1678%" y="341" width="0.0533%" height="15" fill="rgb(247,81,37)" fg:x="97" fg:w="1"/><text x="5.4178%" y="351.50"></text></g><g><title>tiny`hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.05%)</title><rect x="5.1678%" y="325" width="0.0533%" height="15" fill="rgb(209,12,38)" fg:x="97" fg:w="1"/><text x="5.4178%" y="335.50"></text></g><g><title>tiny`hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.05%)</title><rect x="5.1678%" y="309" width="0.0533%" height="15" fill="rgb(227,1,9)" fg:x="97" fg:w="1"/><text x="5.4178%" y="319.50"></text></g><g><title>tiny`core::core_arch::aarch64::neon::vld1_u8 (1 samples, 0.05%)</title><rect x="5.1678%" y="293" width="0.0533%" height="15" fill="rgb(248,47,43)" fg:x="97" fg:w="1"/><text x="5.4178%" y="303.50"></text></g><g><title>tiny`core::ptr::read_unaligned (1 samples, 0.05%)</title><rect x="5.1678%" y="277" width="0.0533%" height="15" fill="rgb(221,10,30)" fg:x="97" fg:w="1"/><text x="5.4178%" y="287.50"></text></g><g><title>tiny`core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.05%)</title><rect x="5.1678%" y="261" width="0.0533%" height="15" fill="rgb(210,229,1)" fg:x="97" fg:w="1"/><text x="5.4178%" y="271.50"></text></g><g><title>tiny`core::ub_checks::is_aligned_and_not_null (1 samples, 0.05%)</title><rect x="5.1678%" y="245" width="0.0533%" height="15" fill="rgb(222,148,37)" fg:x="97" fg:w="1"/><text x="5.4178%" y="255.50"></text></g><g><title>tiny`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.37%)</title><rect x="5.5408%" y="341" width="0.3729%" height="15" fill="rgb(234,67,33)" fg:x="104" fg:w="7"/><text x="5.7908%" y="351.50"></text></g><g><title>tiny`hashbrown::raw::Bucket&lt;T&gt;::next_n (3 samples, 0.16%)</title><rect x="5.9137%" y="341" width="0.1598%" height="15" fill="rgb(247,98,35)" fg:x="111" fg:w="3"/><text x="6.1637%" y="351.50"></text></g><g><title>tiny`core::ub_checks::is_aligned_and_not_null (1 samples, 0.05%)</title><rect x="6.1801%" y="277" width="0.0533%" height="15" fill="rgb(247,138,52)" fg:x="116" fg:w="1"/><text x="6.4301%" y="287.50"></text></g><g><title>tiny`core::core_arch::aarch64::neon::vld1_u8 (3 samples, 0.16%)</title><rect x="6.1268%" y="325" width="0.1598%" height="15" fill="rgb(213,79,30)" fg:x="115" fg:w="3"/><text x="6.3768%" y="335.50"></text></g><g><title>tiny`core::ptr::read_unaligned (3 samples, 0.16%)</title><rect x="6.1268%" y="309" width="0.1598%" height="15" fill="rgb(246,177,23)" fg:x="115" fg:w="3"/><text x="6.3768%" y="319.50"></text></g><g><title>tiny`core::intrinsics::copy_nonoverlapping::precondition_check (3 samples, 0.16%)</title><rect x="6.1268%" y="293" width="0.1598%" height="15" fill="rgb(230,62,27)" fg:x="115" fg:w="3"/><text x="6.3768%" y="303.50"></text></g><g><title>tiny`core::ub_checks::is_nonoverlapping::runtime (1 samples, 0.05%)</title><rect x="6.2334%" y="277" width="0.0533%" height="15" fill="rgb(216,154,8)" fg:x="117" fg:w="1"/><text x="6.4834%" y="287.50"></text></g><g><title>tiny`&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 1.23%)</title><rect x="5.2744%" y="373" width="1.2254%" height="15" fill="rgb(244,35,45)" fg:x="99" fg:w="23"/><text x="5.5244%" y="383.50"></text></g><g><title>tiny`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 1.17%)</title><rect x="5.3277%" y="357" width="1.1721%" height="15" fill="rgb(251,115,12)" fg:x="100" fg:w="22"/><text x="5.5777%" y="367.50"></text></g><g><title>tiny`hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (8 samples, 0.43%)</title><rect x="6.0735%" y="341" width="0.4262%" height="15" fill="rgb(240,54,50)" fg:x="114" fg:w="8"/><text x="6.3235%" y="351.50"></text></g><g><title>tiny`core::core_arch::arm_shared::neon::generated::vreinterpret_s8_u8 (4 samples, 0.21%)</title><rect x="6.2866%" y="325" width="0.2131%" height="15" fill="rgb(233,84,52)" fg:x="118" fg:w="4"/><text x="6.5366%" y="335.50"></text></g><g><title>tiny`&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 1.33%)</title><rect x="5.2211%" y="389" width="1.3319%" height="15" fill="rgb(207,117,47)" fg:x="98" fg:w="25"/><text x="5.4711%" y="399.50"></text></g><g><title>tiny`&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="6.4997%" y="373" width="0.0533%" height="15" fill="rgb(249,43,39)" fg:x="122" fg:w="1"/><text x="6.7497%" y="383.50"></text></g><g><title>tiny`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::get (1 samples, 0.05%)</title><rect x="6.5530%" y="389" width="0.0533%" height="15" fill="rgb(209,38,44)" fg:x="123" fg:w="1"/><text x="6.8030%" y="399.50"></text></g><g><title>tiny`core::iter::traits::iterator::Iterator::collect (1 samples, 0.05%)</title><rect x="6.6063%" y="389" width="0.0533%" height="15" fill="rgb(236,212,23)" fg:x="124" fg:w="1"/><text x="6.8563%" y="399.50"></text></g><g><title>tiny`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.05%)</title><rect x="6.6063%" y="373" width="0.0533%" height="15" fill="rgb(242,79,21)" fg:x="124" fg:w="1"/><text x="6.8563%" y="383.50"></text></g><g><title>tiny`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.05%)</title><rect x="6.6063%" y="357" width="0.0533%" height="15" fill="rgb(211,96,35)" fg:x="124" fg:w="1"/><text x="6.8563%" y="367.50"></text></g><g><title>tiny`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.05%)</title><rect x="6.6063%" y="341" width="0.0533%" height="15" fill="rgb(253,215,40)" fg:x="124" fg:w="1"/><text x="6.8563%" y="351.50"></text></g><g><title>tiny`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::size_hint (1 samples, 0.05%)</title><rect x="6.6063%" y="325" width="0.0533%" height="15" fill="rgb(211,81,21)" fg:x="124" fg:w="1"/><text x="6.8563%" y="335.50"></text></g><g><title>tiny`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.05%)</title><rect x="6.6596%" y="309" width="0.0533%" height="15" fill="rgb(208,190,38)" fg:x="125" fg:w="1"/><text x="6.9096%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.05%)</title><rect x="6.6596%" y="293" width="0.0533%" height="15" fill="rgb(235,213,38)" fg:x="125" fg:w="1"/><text x="6.9096%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.05%)</title><rect x="6.6596%" y="277" width="0.0533%" height="15" fill="rgb(237,122,38)" fg:x="125" fg:w="1"/><text x="6.9096%" y="287.50"></text></g><g><title>tiny`core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;*const tiny::neuron::Neuron,f64&gt;&gt; (2 samples, 0.11%)</title><rect x="6.6596%" y="389" width="0.1066%" height="15" fill="rgb(244,218,35)" fg:x="125" fg:w="2"/><text x="6.9096%" y="399.50"></text></g><g><title>tiny`core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;*const tiny::neuron::Neuron,f64,std::hash::random::RandomState&gt;&gt; (2 samples, 0.11%)</title><rect x="6.6596%" y="373" width="0.1066%" height="15" fill="rgb(240,68,47)" fg:x="125" fg:w="2"/><text x="6.9096%" y="383.50"></text></g><g><title>tiny`core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(*const tiny::neuron::Neuron,f64)&gt;&gt; (2 samples, 0.11%)</title><rect x="6.6596%" y="357" width="0.1066%" height="15" fill="rgb(210,16,53)" fg:x="125" fg:w="2"/><text x="6.9096%" y="367.50"></text></g><g><title>tiny`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.11%)</title><rect x="6.6596%" y="341" width="0.1066%" height="15" fill="rgb(235,124,12)" fg:x="125" fg:w="2"/><text x="6.9096%" y="351.50"></text></g><g><title>tiny`hashbrown::raw::RawTableInner::drop_inner_table (2 samples, 0.11%)</title><rect x="6.6596%" y="325" width="0.1066%" height="15" fill="rgb(224,169,11)" fg:x="125" fg:w="2"/><text x="6.9096%" y="335.50"></text></g><g><title>tiny`hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.05%)</title><rect x="6.7128%" y="309" width="0.0533%" height="15" fill="rgb(250,166,2)" fg:x="126" fg:w="1"/><text x="6.9628%" y="319.50"></text></g><g><title>tiny`core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="7.0858%" y="373" width="0.0533%" height="15" fill="rgb(242,216,29)" fg:x="133" fg:w="1"/><text x="7.3358%" y="383.50"></text></g><g><title>tiny`&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.05%)</title><rect x="7.8316%" y="357" width="0.0533%" height="15" fill="rgb(230,116,27)" fg:x="147" fg:w="1"/><text x="8.0816%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (72 samples, 3.84%)</title><rect x="7.8849%" y="341" width="3.8359%" height="15" fill="rgb(228,99,48)" fg:x="148" fg:w="72"/><text x="8.1349%" y="351.50">libs..</text></g><g><title>tiny`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.16%)</title><rect x="11.7741%" y="325" width="0.1598%" height="15" fill="rgb(253,11,6)" fg:x="221" fg:w="3"/><text x="12.0241%" y="335.50"></text></g><g><title>tiny`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (23 samples, 1.23%)</title><rect x="11.9339%" y="325" width="1.2254%" height="15" fill="rgb(247,143,39)" fg:x="224" fg:w="23"/><text x="12.1839%" y="335.50"></text></g><g><title>tiny`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (132 samples, 7.03%)</title><rect x="11.7208%" y="341" width="7.0325%" height="15" fill="rgb(236,97,10)" fg:x="220" fg:w="132"/><text x="11.9708%" y="351.50">tiny`&lt;std..</text></g><g><title>tiny`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (105 samples, 5.59%)</title><rect x="13.1593%" y="325" width="5.5940%" height="15" fill="rgb(233,208,19)" fg:x="247" fg:w="105"/><text x="13.4093%" y="335.50">tiny`&lt;c..</text></g><g><title>tiny`&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (16 samples, 0.85%)</title><rect x="18.7533%" y="341" width="0.8524%" height="15" fill="rgb(216,164,2)" fg:x="352" fg:w="16"/><text x="19.0033%" y="351.50"></text></g><g><title>tiny`DYLD-STUB$$memcpy (2 samples, 0.11%)</title><rect x="19.6058%" y="341" width="0.1066%" height="15" fill="rgb(220,129,5)" fg:x="368" fg:w="2"/><text x="19.8558%" y="351.50"></text></g><g><title>tiny`core::hash::Hasher::write_usize (1 samples, 0.05%)</title><rect x="19.7123%" y="325" width="0.0533%" height="15" fill="rgb(242,17,10)" fg:x="370" fg:w="1"/><text x="19.9623%" y="335.50"></text></g><g><title>tiny`core::hash::impls::_&lt;impl core::hash::Hash for ()&gt;::hash (1 samples, 0.05%)</title><rect x="19.7656%" y="325" width="0.0533%" height="15" fill="rgb(242,107,0)" fg:x="371" fg:w="1"/><text x="20.0156%" y="335.50"></text></g><g><title>tiny`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.11%)</title><rect x="19.8189%" y="309" width="0.1066%" height="15" fill="rgb(251,28,31)" fg:x="372" fg:w="2"/><text x="20.0689%" y="319.50"></text></g><g><title>tiny`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.05%)</title><rect x="19.9254%" y="293" width="0.0533%" height="15" fill="rgb(233,223,10)" fg:x="374" fg:w="1"/><text x="20.1754%" y="303.50"></text></g><g><title>tiny`core::hash::sip::u8to64_le (10 samples, 0.53%)</title><rect x="20.9909%" y="261" width="0.5328%" height="15" fill="rgb(215,21,27)" fg:x="394" fg:w="10"/><text x="21.2409%" y="271.50"></text></g><g><title>tiny`core::ub_checks::is_aligned_and_not_null (19 samples, 1.01%)</title><rect x="22.0032%" y="245" width="1.0123%" height="15" fill="rgb(232,23,21)" fg:x="413" fg:w="19"/><text x="22.2532%" y="255.50"></text></g><g><title>tiny`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (66 samples, 3.52%)</title><rect x="20.0852%" y="277" width="3.5162%" height="15" fill="rgb(244,5,23)" fg:x="377" fg:w="66"/><text x="20.3352%" y="287.50">tin..</text></g><g><title>tiny`core::intrinsics::copy_nonoverlapping::precondition_check (39 samples, 2.08%)</title><rect x="21.5237%" y="261" width="2.0778%" height="15" fill="rgb(226,81,46)" fg:x="404" fg:w="39"/><text x="21.7737%" y="271.50">t..</text></g><g><title>tiny`core::ub_checks::is_nonoverlapping::runtime (11 samples, 0.59%)</title><rect x="23.0155%" y="245" width="0.5860%" height="15" fill="rgb(247,70,30)" fg:x="432" fg:w="11"/><text x="23.2655%" y="255.50"></text></g><g><title>tiny`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (36 samples, 1.92%)</title><rect x="23.6015%" y="277" width="1.9180%" height="15" fill="rgb(212,68,19)" fg:x="443" fg:w="36"/><text x="23.8515%" y="287.50">t..</text></g><g><title>tiny`core::hash::BuildHasher::hash_one (334 samples, 17.79%)</title><rect x="7.8849%" y="357" width="17.7944%" height="15" fill="rgb(240,187,13)" fg:x="148" fg:w="334"/><text x="8.1349%" y="367.50">tiny`core::hash::BuildHasher..</text></g><g><title>tiny`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (112 samples, 5.97%)</title><rect x="19.7123%" y="341" width="5.9670%" height="15" fill="rgb(223,113,26)" fg:x="370" fg:w="112"/><text x="19.9623%" y="351.50">tiny`cor..</text></g><g><title>tiny`core::hash::impls::_&lt;impl core::hash::Hash for *const T&gt;::hash (110 samples, 5.86%)</title><rect x="19.8189%" y="325" width="5.8604%" height="15" fill="rgb(206,192,2)" fg:x="372" fg:w="110"/><text x="20.0689%" y="335.50">tiny`co..</text></g><g><title>tiny`core::hash::Hasher::write_usize (108 samples, 5.75%)</title><rect x="19.9254%" y="309" width="5.7539%" height="15" fill="rgb(241,108,4)" fg:x="374" fg:w="108"/><text x="20.1754%" y="319.50">tiny`co..</text></g><g><title>tiny`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (107 samples, 5.70%)</title><rect x="19.9787%" y="293" width="5.7006%" height="15" fill="rgb(247,173,49)" fg:x="375" fg:w="107"/><text x="20.2287%" y="303.50">tiny`&lt;s..</text></g><g><title>tiny`core::hash::sip::u8to64_le (3 samples, 0.16%)</title><rect x="25.5194%" y="277" width="0.1598%" height="15" fill="rgb(224,114,35)" fg:x="479" fg:w="3"/><text x="25.7694%" y="287.50"></text></g><g><title>tiny`hashbrown::raw::RawTable&lt;T,A&gt;::find (9 samples, 0.48%)</title><rect x="25.6793%" y="357" width="0.4795%" height="15" fill="rgb(245,159,27)" fg:x="482" fg:w="9"/><text x="25.9293%" y="367.50"></text></g><g><title>tiny`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.85%)</title><rect x="26.9046%" y="341" width="0.8524%" height="15" fill="rgb(245,172,44)" fg:x="505" fg:w="16"/><text x="27.1546%" y="351.50"></text></g><g><title>tiny`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (33 samples, 1.76%)</title><rect x="27.7571%" y="341" width="1.7581%" height="15" fill="rgb(236,23,11)" fg:x="521" fg:w="33"/><text x="28.0071%" y="351.50"></text></g><g><title>tiny`hashbrown::raw::RawTable&lt;T,A&gt;::find (42 samples, 2.24%)</title><rect x="29.5152%" y="341" width="2.2376%" height="15" fill="rgb(205,117,38)" fg:x="554" fg:w="42"/><text x="29.7652%" y="351.50">t..</text></g><g><title>tiny`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (3 samples, 0.16%)</title><rect x="31.7528%" y="341" width="0.1598%" height="15" fill="rgb(237,72,25)" fg:x="596" fg:w="3"/><text x="32.0028%" y="351.50"></text></g><g><title>tiny`core::ub_checks::is_aligned_and_not_null (17 samples, 0.91%)</title><rect x="32.7651%" y="277" width="0.9057%" height="15" fill="rgb(244,70,9)" fg:x="615" fg:w="17"/><text x="33.0151%" y="287.50"></text></g><g><title>tiny`core::intrinsics::copy_nonoverlapping::precondition_check (48 samples, 2.56%)</title><rect x="32.3388%" y="293" width="2.5573%" height="15" fill="rgb(217,125,39)" fg:x="607" fg:w="48"/><text x="32.5888%" y="303.50">ti..</text></g><g><title>tiny`core::ub_checks::is_nonoverlapping::runtime (23 samples, 1.23%)</title><rect x="33.6708%" y="277" width="1.2254%" height="15" fill="rgb(235,36,10)" fg:x="632" fg:w="23"/><text x="33.9208%" y="287.50"></text></g><g><title>tiny`core::core_arch::aarch64::neon::vld1_u8 (59 samples, 3.14%)</title><rect x="31.9126%" y="325" width="3.1433%" height="15" fill="rgb(251,123,47)" fg:x="599" fg:w="59"/><text x="32.1626%" y="335.50">tin..</text></g><g><title>tiny`core::ptr::read_unaligned (55 samples, 2.93%)</title><rect x="32.1257%" y="309" width="2.9302%" height="15" fill="rgb(221,13,13)" fg:x="603" fg:w="55"/><text x="32.3757%" y="319.50">ti..</text></g><g><title>tiny`core::ub_checks::is_nonoverlapping::runtime (3 samples, 0.16%)</title><rect x="34.8961%" y="293" width="0.1598%" height="15" fill="rgb(238,131,9)" fg:x="655" fg:w="3"/><text x="35.1461%" y="303.50"></text></g><g><title>tiny`core::core_arch::arm_shared::neon::generated::vceq_u8 (8 samples, 0.43%)</title><rect x="35.0559%" y="325" width="0.4262%" height="15" fill="rgb(211,50,8)" fg:x="658" fg:w="8"/><text x="35.3059%" y="335.50"></text></g><g><title>tiny`core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (2 samples, 0.11%)</title><rect x="35.4822%" y="325" width="0.1066%" height="15" fill="rgb(245,182,24)" fg:x="666" fg:w="2"/><text x="35.7322%" y="335.50"></text></g><g><title>tiny`core::core_arch::arm_shared::neon::vdup_n_u8 (6 samples, 0.32%)</title><rect x="35.5887%" y="325" width="0.3197%" height="15" fill="rgb(242,14,37)" fg:x="668" fg:w="6"/><text x="35.8387%" y="335.50"></text></g><g><title>tiny`core::core_arch::arm_shared::neon::vget_lane_u64 (2 samples, 0.11%)</title><rect x="35.9084%" y="325" width="0.1066%" height="15" fill="rgb(246,228,12)" fg:x="674" fg:w="2"/><text x="36.1584%" y="335.50"></text></g><g><title>tiny`hashbrown::map::equivalent_key::_{{closure}} (3 samples, 0.16%)</title><rect x="36.0149%" y="325" width="0.1598%" height="15" fill="rgb(213,55,15)" fg:x="676" fg:w="3"/><text x="36.2649%" y="335.50"></text></g><g><title>tiny`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (10 samples, 0.53%)</title><rect x="36.1747%" y="325" width="0.5328%" height="15" fill="rgb(209,9,3)" fg:x="679" fg:w="10"/><text x="36.4247%" y="335.50"></text></g><g><title>tiny`&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (3 samples, 0.16%)</title><rect x="37.2403%" y="309" width="0.1598%" height="15" fill="rgb(230,59,30)" fg:x="699" fg:w="3"/><text x="37.4903%" y="319.50"></text></g><g><title>tiny`&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (3 samples, 0.16%)</title><rect x="37.4001%" y="293" width="0.1598%" height="15" fill="rgb(209,121,21)" fg:x="702" fg:w="3"/><text x="37.6501%" y="303.50"></text></g><g><title>tiny`&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (5 samples, 0.27%)</title><rect x="37.5599%" y="293" width="0.2664%" height="15" fill="rgb(220,109,13)" fg:x="705" fg:w="5"/><text x="37.8099%" y="303.50"></text></g><g><title>tiny`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (28 samples, 1.49%)</title><rect x="36.7075%" y="325" width="1.4917%" height="15" fill="rgb(232,18,1)" fg:x="689" fg:w="28"/><text x="36.9575%" y="335.50"></text></g><g><title>tiny`hashbrown::map::equivalent_key::_{{closure}} (15 samples, 0.80%)</title><rect x="37.4001%" y="309" width="0.7991%" height="15" fill="rgb(215,41,42)" fg:x="702" fg:w="15"/><text x="37.6501%" y="319.50"></text></g><g><title>tiny`core::ptr::const_ptr::_&lt;impl core::cmp::PartialEq for *const T&gt;::eq (7 samples, 0.37%)</title><rect x="37.8263%" y="293" width="0.3729%" height="15" fill="rgb(224,123,36)" fg:x="710" fg:w="7"/><text x="38.0763%" y="303.50"></text></g><g><title>tiny`std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (592 samples, 31.54%)</title><rect x="6.7661%" y="389" width="31.5397%" height="15" fill="rgb(240,125,3)" fg:x="127" fg:w="592"/><text x="7.0161%" y="399.50">tiny`std::collections::hash::map::HashMap&lt;K,V,S&gt;::c..</text></g><g><title>tiny`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (585 samples, 31.17%)</title><rect x="7.1391%" y="373" width="31.1668%" height="15" fill="rgb(205,98,50)" fg:x="134" fg:w="585"/><text x="7.3891%" y="383.50">tiny`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key</text></g><g><title>tiny`hashbrown::raw::RawTable&lt;T,A&gt;::get (228 samples, 12.15%)</title><rect x="26.1588%" y="357" width="12.1470%" height="15" fill="rgb(205,185,37)" fg:x="491" fg:w="228"/><text x="26.4088%" y="367.50">tiny`hashbrown::ra..</text></g><g><title>tiny`hashbrown::raw::RawTable&lt;T,A&gt;::find (120 samples, 6.39%)</title><rect x="31.9126%" y="341" width="6.3932%" height="15" fill="rgb(238,207,15)" fg:x="599" fg:w="120"/><text x="32.1626%" y="351.50">tiny`has..</text></g><g><title>tiny`hashbrown::raw::neon::Group::match_byte (2 samples, 0.11%)</title><rect x="38.1993%" y="325" width="0.1066%" height="15" fill="rgb(213,199,42)" fg:x="717" fg:w="2"/><text x="38.4493%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.21%)</title><rect x="38.4124%" y="341" width="0.2131%" height="15" fill="rgb(235,201,11)" fg:x="721" fg:w="4"/><text x="38.6624%" y="351.50"></text></g><g><title>tiny`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.05%)</title><rect x="38.6255%" y="325" width="0.0533%" height="15" fill="rgb(207,46,11)" fg:x="725" fg:w="1"/><text x="38.8755%" y="335.50"></text></g><g><title>tiny`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (7 samples, 0.37%)</title><rect x="38.6255%" y="341" width="0.3729%" height="15" fill="rgb(241,35,35)" fg:x="725" fg:w="7"/><text x="38.8755%" y="351.50"></text></g><g><title>tiny`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (6 samples, 0.32%)</title><rect x="38.6787%" y="325" width="0.3197%" height="15" fill="rgb(243,32,47)" fg:x="726" fg:w="6"/><text x="38.9287%" y="335.50"></text></g><g><title>tiny`core::hash::sip::u8to64_le (2 samples, 0.11%)</title><rect x="39.0517%" y="261" width="0.1066%" height="15" fill="rgb(247,202,23)" fg:x="733" fg:w="2"/><text x="39.3017%" y="271.50"></text></g><g><title>tiny`core::ub_checks::is_aligned_and_not_null (1 samples, 0.05%)</title><rect x="39.1582%" y="245" width="0.0533%" height="15" fill="rgb(219,102,11)" fg:x="735" fg:w="1"/><text x="39.4082%" y="255.50"></text></g><g><title>tiny`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.21%)</title><rect x="39.0517%" y="277" width="0.2131%" height="15" fill="rgb(243,110,44)" fg:x="733" fg:w="4"/><text x="39.3017%" y="287.50"></text></g><g><title>tiny`core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.11%)</title><rect x="39.1582%" y="261" width="0.1066%" height="15" fill="rgb(222,74,54)" fg:x="735" fg:w="2"/><text x="39.4082%" y="271.50"></text></g><g><title>tiny`core::ub_checks::is_nonoverlapping::runtime (1 samples, 0.05%)</title><rect x="39.2115%" y="245" width="0.0533%" height="15" fill="rgb(216,99,12)" fg:x="736" fg:w="1"/><text x="39.4615%" y="255.50"></text></g><g><title>tiny`core::hash::BuildHasher::hash_one (17 samples, 0.91%)</title><rect x="38.4124%" y="357" width="0.9057%" height="15" fill="rgb(226,22,26)" fg:x="721" fg:w="17"/><text x="38.6624%" y="367.50"></text></g><g><title>tiny`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.32%)</title><rect x="38.9984%" y="341" width="0.3197%" height="15" fill="rgb(217,163,10)" fg:x="732" fg:w="6"/><text x="39.2484%" y="351.50"></text></g><g><title>tiny`core::hash::impls::_&lt;impl core::hash::Hash for *const T&gt;::hash (6 samples, 0.32%)</title><rect x="38.9984%" y="325" width="0.3197%" height="15" fill="rgb(213,25,53)" fg:x="732" fg:w="6"/><text x="39.2484%" y="335.50"></text></g><g><title>tiny`core::hash::Hasher::write_usize (6 samples, 0.32%)</title><rect x="38.9984%" y="309" width="0.3197%" height="15" fill="rgb(252,105,26)" fg:x="732" fg:w="6"/><text x="39.2484%" y="319.50"></text></g><g><title>tiny`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.32%)</title><rect x="38.9984%" y="293" width="0.3197%" height="15" fill="rgb(220,39,43)" fg:x="732" fg:w="6"/><text x="39.2484%" y="303.50"></text></g><g><title>tiny`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.05%)</title><rect x="39.2648%" y="277" width="0.0533%" height="15" fill="rgb(229,68,48)" fg:x="737" fg:w="1"/><text x="39.5148%" y="287.50"></text></g><g><title>tiny`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.21%)</title><rect x="39.3181%" y="341" width="0.2131%" height="15" fill="rgb(252,8,32)" fg:x="738" fg:w="4"/><text x="39.5681%" y="351.50"></text></g><g><title>tiny`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2 samples, 0.11%)</title><rect x="39.5312%" y="341" width="0.1066%" height="15" fill="rgb(223,20,43)" fg:x="742" fg:w="2"/><text x="39.7812%" y="351.50"></text></g><g><title>tiny`core::core_arch::aarch64::neon::vld1_u8 (2 samples, 0.11%)</title><rect x="39.7443%" y="325" width="0.1066%" height="15" fill="rgb(229,81,49)" fg:x="746" fg:w="2"/><text x="39.9943%" y="335.50"></text></g><g><title>tiny`core::ptr::read_unaligned (2 samples, 0.11%)</title><rect x="39.7443%" y="309" width="0.1066%" height="15" fill="rgb(236,28,36)" fg:x="746" fg:w="2"/><text x="39.9943%" y="319.50"></text></g><g><title>tiny`core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.11%)</title><rect x="39.7443%" y="293" width="0.1066%" height="15" fill="rgb(249,185,26)" fg:x="746" fg:w="2"/><text x="39.9943%" y="303.50"></text></g><g><title>tiny`core::ub_checks::is_aligned_and_not_null (2 samples, 0.11%)</title><rect x="39.7443%" y="277" width="0.1066%" height="15" fill="rgb(249,174,33)" fg:x="746" fg:w="2"/><text x="39.9943%" y="287.50"></text></g><g><title>tiny`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.05%)</title><rect x="39.8508%" y="325" width="0.0533%" height="15" fill="rgb(233,201,37)" fg:x="748" fg:w="1"/><text x="40.1008%" y="335.50"></text></g><g><title>tiny`&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.05%)</title><rect x="39.9041%" y="309" width="0.0533%" height="15" fill="rgb(221,78,26)" fg:x="749" fg:w="1"/><text x="40.1541%" y="319.50"></text></g><g><title>tiny`&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (1 samples, 0.05%)</title><rect x="39.9574%" y="293" width="0.0533%" height="15" fill="rgb(250,127,30)" fg:x="750" fg:w="1"/><text x="40.2074%" y="303.50"></text></g><g><title>tiny`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (33 samples, 1.76%)</title><rect x="38.3058%" y="389" width="1.7581%" height="15" fill="rgb(230,49,44)" fg:x="719" fg:w="33"/><text x="38.5558%" y="399.50"></text></g><g><title>tiny`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (33 samples, 1.76%)</title><rect x="38.3058%" y="373" width="1.7581%" height="15" fill="rgb(229,67,23)" fg:x="719" fg:w="33"/><text x="38.5558%" y="383.50"></text></g><g><title>tiny`hashbrown::raw::RawTable&lt;T,A&gt;::get (14 samples, 0.75%)</title><rect x="39.3181%" y="357" width="0.7459%" height="15" fill="rgb(249,83,47)" fg:x="738" fg:w="14"/><text x="39.5681%" y="367.50"></text></g><g><title>tiny`hashbrown::raw::RawTable&lt;T,A&gt;::find (8 samples, 0.43%)</title><rect x="39.6377%" y="341" width="0.4262%" height="15" fill="rgb(215,43,3)" fg:x="744" fg:w="8"/><text x="39.8877%" y="351.50"></text></g><g><title>tiny`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (3 samples, 0.16%)</title><rect x="39.9041%" y="325" width="0.1598%" height="15" fill="rgb(238,154,13)" fg:x="749" fg:w="3"/><text x="40.1541%" y="335.50"></text></g><g><title>tiny`hashbrown::map::equivalent_key::_{{closure}} (2 samples, 0.11%)</title><rect x="39.9574%" y="309" width="0.1066%" height="15" fill="rgb(219,56,2)" fg:x="750" fg:w="2"/><text x="40.2074%" y="319.50"></text></g><g><title>tiny`core::ptr::const_ptr::_&lt;impl core::cmp::PartialEq for *const T&gt;::eq (1 samples, 0.05%)</title><rect x="40.0107%" y="293" width="0.0533%" height="15" fill="rgb(233,0,4)" fg:x="751" fg:w="1"/><text x="40.2607%" y="303.50"></text></g><g><title>tiny`&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.05%)</title><rect x="41.1827%" y="357" width="0.0533%" height="15" fill="rgb(235,30,7)" fg:x="773" fg:w="1"/><text x="41.4327%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (119 samples, 6.34%)</title><rect x="41.7155%" y="341" width="6.3399%" height="15" fill="rgb(250,79,13)" fg:x="783" fg:w="119"/><text x="41.9655%" y="351.50">libsyste..</text></g><g><title>tiny`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (14 samples, 0.75%)</title><rect x="48.2685%" y="325" width="0.7459%" height="15" fill="rgb(211,146,34)" fg:x="906" fg:w="14"/><text x="48.5185%" y="335.50"></text></g><g><title>tiny`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (28 samples, 1.49%)</title><rect x="49.0144%" y="325" width="1.4917%" height="15" fill="rgb(228,22,38)" fg:x="920" fg:w="28"/><text x="49.2644%" y="335.50"></text></g><g><title>tiny`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (199 samples, 10.60%)</title><rect x="48.0554%" y="341" width="10.6020%" height="15" fill="rgb(235,168,5)" fg:x="902" fg:w="199"/><text x="48.3054%" y="351.50">tiny`&lt;std::hash..</text></g><g><title>tiny`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (153 samples, 8.15%)</title><rect x="50.5061%" y="325" width="8.1513%" height="15" fill="rgb(221,155,16)" fg:x="948" fg:w="153"/><text x="50.7561%" y="335.50">tiny`&lt;core:..</text></g><g><title>tiny`&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (23 samples, 1.23%)</title><rect x="58.6574%" y="341" width="1.2254%" height="15" fill="rgb(215,215,53)" fg:x="1101" fg:w="23"/><text x="58.9074%" y="351.50"></text></g><g><title>tiny`DYLD-STUB$$memcpy (7 samples, 0.37%)</title><rect x="59.8828%" y="341" width="0.3729%" height="15" fill="rgb(223,4,10)" fg:x="1124" fg:w="7"/><text x="60.1328%" y="351.50"></text></g><g><title>tiny`core::hash::Hasher::write_usize (2 samples, 0.11%)</title><rect x="60.3090%" y="325" width="0.1066%" height="15" fill="rgb(234,103,6)" fg:x="1132" fg:w="2"/><text x="60.5590%" y="335.50"></text></g><g><title>tiny`core::hash::impls::_&lt;impl core::hash::Hash for ()&gt;::hash (2 samples, 0.11%)</title><rect x="60.4156%" y="325" width="0.1066%" height="15" fill="rgb(227,97,0)" fg:x="1134" fg:w="2"/><text x="60.6656%" y="335.50"></text></g><g><title>tiny`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.05%)</title><rect x="60.6819%" y="309" width="0.0533%" height="15" fill="rgb(234,150,53)" fg:x="1139" fg:w="1"/><text x="60.9319%" y="319.50"></text></g><g><title>tiny`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.11%)</title><rect x="60.8950%" y="293" width="0.1066%" height="15" fill="rgb(228,201,54)" fg:x="1143" fg:w="2"/><text x="61.1450%" y="303.50"></text></g><g><title>tiny`core::hash::sip::u8to64_le (11 samples, 0.59%)</title><rect x="62.1204%" y="261" width="0.5860%" height="15" fill="rgb(222,22,37)" fg:x="1166" fg:w="11"/><text x="62.3704%" y="271.50"></text></g><g><title>tiny`core::ub_checks::is_aligned_and_not_null (14 samples, 0.75%)</title><rect x="63.1859%" y="245" width="0.7459%" height="15" fill="rgb(237,53,32)" fg:x="1186" fg:w="14"/><text x="63.4359%" y="255.50"></text></g><g><title>tiny`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (69 samples, 3.68%)</title><rect x="61.2147%" y="277" width="3.6761%" height="15" fill="rgb(233,25,53)" fg:x="1149" fg:w="69"/><text x="61.4647%" y="287.50">tiny..</text></g><g><title>tiny`core::intrinsics::copy_nonoverlapping::precondition_check (41 samples, 2.18%)</title><rect x="62.7064%" y="261" width="2.1843%" height="15" fill="rgb(210,40,34)" fg:x="1177" fg:w="41"/><text x="62.9564%" y="271.50">t..</text></g><g><title>tiny`core::ub_checks::is_nonoverlapping::runtime (18 samples, 0.96%)</title><rect x="63.9318%" y="245" width="0.9590%" height="15" fill="rgb(241,220,44)" fg:x="1200" fg:w="18"/><text x="64.1818%" y="255.50"></text></g><g><title>tiny`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (33 samples, 1.76%)</title><rect x="64.8908%" y="277" width="1.7581%" height="15" fill="rgb(235,28,35)" fg:x="1218" fg:w="33"/><text x="65.1408%" y="287.50"></text></g><g><title>tiny`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (124 samples, 6.61%)</title><rect x="60.2557%" y="341" width="6.6063%" height="15" fill="rgb(210,56,17)" fg:x="1131" fg:w="124"/><text x="60.5057%" y="351.50">tiny`core..</text></g><g><title>tiny`core::hash::impls::_&lt;impl core::hash::Hash for *const T&gt;::hash (119 samples, 6.34%)</title><rect x="60.5221%" y="325" width="6.3399%" height="15" fill="rgb(224,130,29)" fg:x="1136" fg:w="119"/><text x="60.7721%" y="335.50">tiny`cor..</text></g><g><title>tiny`core::hash::Hasher::write_usize (115 samples, 6.13%)</title><rect x="60.7352%" y="309" width="6.1268%" height="15" fill="rgb(235,212,8)" fg:x="1140" fg:w="115"/><text x="60.9852%" y="319.50">tiny`cor..</text></g><g><title>tiny`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (110 samples, 5.86%)</title><rect x="61.0016%" y="293" width="5.8604%" height="15" fill="rgb(223,33,50)" fg:x="1145" fg:w="110"/><text x="61.2516%" y="303.50">tiny`&lt;s..</text></g><g><title>tiny`core::hash::sip::u8to64_le (4 samples, 0.21%)</title><rect x="66.6489%" y="277" width="0.2131%" height="15" fill="rgb(219,149,13)" fg:x="1251" fg:w="4"/><text x="66.8989%" y="287.50"></text></g><g><title>tiny`core::hash::BuildHasher::hash_one (482 samples, 25.68%)</title><rect x="41.2360%" y="357" width="25.6793%" height="15" fill="rgb(250,156,29)" fg:x="774" fg:w="482"/><text x="41.4860%" y="367.50">tiny`core::hash::BuildHasher::hash_one</text></g><g><title>tiny`core::hash::impls::_&lt;impl core::hash::Hash for *const T&gt;::hash (1 samples, 0.05%)</title><rect x="66.8620%" y="341" width="0.0533%" height="15" fill="rgb(216,193,19)" fg:x="1255" fg:w="1"/><text x="67.1120%" y="351.50"></text></g><g><title>tiny`hashbrown::raw::RawTable&lt;T,A&gt;::find (17 samples, 0.91%)</title><rect x="66.9153%" y="357" width="0.9057%" height="15" fill="rgb(216,135,14)" fg:x="1256" fg:w="17"/><text x="67.1653%" y="367.50"></text></g><g><title>tiny`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 1.28%)</title><rect x="68.9931%" y="341" width="1.2786%" height="15" fill="rgb(241,47,5)" fg:x="1295" fg:w="24"/><text x="69.2431%" y="351.50"></text></g><g><title>tiny`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (45 samples, 2.40%)</title><rect x="70.2717%" y="341" width="2.3974%" height="15" fill="rgb(233,42,35)" fg:x="1319" fg:w="45"/><text x="70.5217%" y="351.50">ti..</text></g><g><title>tiny`hashbrown::raw::RawTable&lt;T,A&gt;::find (69 samples, 3.68%)</title><rect x="72.6692%" y="341" width="3.6761%" height="15" fill="rgb(231,13,6)" fg:x="1364" fg:w="69"/><text x="72.9192%" y="351.50">tiny..</text></g><g><title>tiny`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (3 samples, 0.16%)</title><rect x="76.3452%" y="341" width="0.1598%" height="15" fill="rgb(207,181,40)" fg:x="1433" fg:w="3"/><text x="76.5952%" y="351.50"></text></g><g><title>tiny`core::intrinsics::copy_nonoverlapping::precondition_check (5 samples, 0.27%)</title><rect x="76.7182%" y="309" width="0.2664%" height="15" fill="rgb(254,173,49)" fg:x="1440" fg:w="5"/><text x="76.9682%" y="319.50"></text></g><g><title>tiny`core::ub_checks::is_aligned_and_not_null (34 samples, 1.81%)</title><rect x="77.9968%" y="277" width="1.8114%" height="15" fill="rgb(221,1,38)" fg:x="1464" fg:w="34"/><text x="78.2468%" y="287.50">t..</text></g><g><title>tiny`core::intrinsics::copy_nonoverlapping::precondition_check (91 samples, 4.85%)</title><rect x="77.5173%" y="293" width="4.8482%" height="15" fill="rgb(206,124,46)" fg:x="1455" fg:w="91"/><text x="77.7673%" y="303.50">tiny`c..</text></g><g><title>tiny`core::ub_checks::is_nonoverlapping::runtime (48 samples, 2.56%)</title><rect x="79.8082%" y="277" width="2.5573%" height="15" fill="rgb(249,21,11)" fg:x="1498" fg:w="48"/><text x="80.0582%" y="287.50">ti..</text></g><g><title>tiny`core::ub_checks::is_aligned_and_not_null (3 samples, 0.16%)</title><rect x="82.3655%" y="293" width="0.1598%" height="15" fill="rgb(222,201,40)" fg:x="1546" fg:w="3"/><text x="82.6155%" y="303.50"></text></g><g><title>tiny`core::core_arch::aarch64::neon::vld1_u8 (116 samples, 6.18%)</title><rect x="76.5051%" y="325" width="6.1801%" height="15" fill="rgb(235,61,29)" fg:x="1436" fg:w="116"/><text x="76.7551%" y="335.50">tiny`cor..</text></g><g><title>tiny`core::ptr::read_unaligned (107 samples, 5.70%)</title><rect x="76.9845%" y="309" width="5.7006%" height="15" fill="rgb(219,207,3)" fg:x="1445" fg:w="107"/><text x="77.2345%" y="319.50">tiny`co..</text></g><g><title>tiny`core::ub_checks::is_nonoverlapping::runtime (3 samples, 0.16%)</title><rect x="82.5253%" y="293" width="0.1598%" height="15" fill="rgb(222,56,46)" fg:x="1549" fg:w="3"/><text x="82.7753%" y="303.50"></text></g><g><title>tiny`core::core_arch::arm_shared::neon::generated::vceq_u8 (15 samples, 0.80%)</title><rect x="82.6851%" y="325" width="0.7991%" height="15" fill="rgb(239,76,54)" fg:x="1552" fg:w="15"/><text x="82.9351%" y="335.50"></text></g><g><title>tiny`core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (8 samples, 0.43%)</title><rect x="83.4843%" y="325" width="0.4262%" height="15" fill="rgb(231,124,27)" fg:x="1567" fg:w="8"/><text x="83.7343%" y="335.50"></text></g><g><title>tiny`core::core_arch::arm_shared::neon::vdup_n_u8 (2 samples, 0.11%)</title><rect x="83.9105%" y="325" width="0.1066%" height="15" fill="rgb(249,195,6)" fg:x="1575" fg:w="2"/><text x="84.1605%" y="335.50"></text></g><g><title>tiny`core::core_arch::arm_shared::neon::vget_lane_u64 (7 samples, 0.37%)</title><rect x="84.0170%" y="325" width="0.3729%" height="15" fill="rgb(237,174,47)" fg:x="1577" fg:w="7"/><text x="84.2670%" y="335.50"></text></g><g><title>tiny`hashbrown::map::equivalent_key::_{{closure}} (4 samples, 0.21%)</title><rect x="84.3900%" y="325" width="0.2131%" height="15" fill="rgb(206,201,31)" fg:x="1584" fg:w="4"/><text x="84.6400%" y="335.50"></text></g><g><title>tiny`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (22 samples, 1.17%)</title><rect x="84.6031%" y="325" width="1.1721%" height="15" fill="rgb(231,57,52)" fg:x="1588" fg:w="22"/><text x="84.8531%" y="335.50"></text></g><g><title>tiny`&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (4 samples, 0.21%)</title><rect x="86.5210%" y="309" width="0.2131%" height="15" fill="rgb(248,177,22)" fg:x="1624" fg:w="4"/><text x="86.7710%" y="319.50"></text></g><g><title>tiny`&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (4 samples, 0.21%)</title><rect x="86.9473%" y="293" width="0.2131%" height="15" fill="rgb(215,211,37)" fg:x="1632" fg:w="4"/><text x="87.1973%" y="303.50"></text></g><g><title>tiny`&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (5 samples, 0.27%)</title><rect x="87.1604%" y="293" width="0.2664%" height="15" fill="rgb(241,128,51)" fg:x="1636" fg:w="5"/><text x="87.4104%" y="303.50"></text></g><g><title>tiny`hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (41 samples, 2.18%)</title><rect x="85.7752%" y="325" width="2.1843%" height="15" fill="rgb(227,165,31)" fg:x="1610" fg:w="41"/><text x="86.0252%" y="335.50">t..</text></g><g><title>tiny`hashbrown::map::equivalent_key::_{{closure}} (23 samples, 1.23%)</title><rect x="86.7342%" y="309" width="1.2254%" height="15" fill="rgb(228,167,24)" fg:x="1628" fg:w="23"/><text x="86.9842%" y="319.50"></text></g><g><title>tiny`core::ptr::const_ptr::_&lt;impl core::cmp::PartialEq for *const T&gt;::eq (10 samples, 0.53%)</title><rect x="87.4267%" y="293" width="0.5328%" height="15" fill="rgb(228,143,12)" fg:x="1641" fg:w="10"/><text x="87.6767%" y="303.50"></text></g><g><title>tiny`hashbrown::raw::RawTable&lt;T,A&gt;::find (219 samples, 11.67%)</title><rect x="76.5051%" y="341" width="11.6676%" height="15" fill="rgb(249,149,8)" fg:x="1436" fg:w="219"/><text x="76.7551%" y="351.50">tiny`hashbrown::r..</text></g><g><title>tiny`hashbrown::raw::neon::Group::match_byte (4 samples, 0.21%)</title><rect x="87.9595%" y="325" width="0.2131%" height="15" fill="rgb(243,35,44)" fg:x="1651" fg:w="4"/><text x="88.2095%" y="335.50"></text></g><g><title>tiny`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (905 samples, 48.22%)</title><rect x="40.0639%" y="389" width="48.2152%" height="15" fill="rgb(246,89,9)" fg:x="752" fg:w="905"/><text x="40.3139%" y="399.50">tiny`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut</text></g><g><title>tiny`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (904 samples, 48.16%)</title><rect x="40.1172%" y="373" width="48.1620%" height="15" fill="rgb(233,213,13)" fg:x="753" fg:w="904"/><text x="40.3672%" y="383.50">tiny`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut</text></g><g><title>tiny`hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (384 samples, 20.46%)</title><rect x="67.8210%" y="357" width="20.4582%" height="15" fill="rgb(233,141,41)" fg:x="1273" fg:w="384"/><text x="68.0710%" y="367.50">tiny`hashbrown::raw::RawTable&lt;T,..</text></g><g><title>tiny`hashbrown::raw::neon::Group::match_byte (2 samples, 0.11%)</title><rect x="88.1726%" y="341" width="0.1066%" height="15" fill="rgb(239,167,4)" fg:x="1655" fg:w="2"/><text x="88.4226%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.16%)</title><rect x="88.3324%" y="341" width="0.1598%" height="15" fill="rgb(209,217,16)" fg:x="1658" fg:w="3"/><text x="88.5824%" y="351.50"></text></g><g><title>tiny`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.11%)</title><rect x="88.4923%" y="325" width="0.1066%" height="15" fill="rgb(219,88,35)" fg:x="1661" fg:w="2"/><text x="88.7423%" y="335.50"></text></g><g><title>tiny`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (7 samples, 0.37%)</title><rect x="88.4923%" y="341" width="0.3729%" height="15" fill="rgb(220,193,23)" fg:x="1661" fg:w="7"/><text x="88.7423%" y="351.50"></text></g><g><title>tiny`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5 samples, 0.27%)</title><rect x="88.5988%" y="325" width="0.2664%" height="15" fill="rgb(230,90,52)" fg:x="1663" fg:w="5"/><text x="88.8488%" y="335.50"></text></g><g><title>tiny`&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.05%)</title><rect x="88.8652%" y="341" width="0.0533%" height="15" fill="rgb(252,106,19)" fg:x="1668" fg:w="1"/><text x="89.1152%" y="351.50"></text></g><g><title>tiny`core::ub_checks::is_aligned_and_not_null (2 samples, 0.11%)</title><rect x="88.9718%" y="245" width="0.1066%" height="15" fill="rgb(206,74,20)" fg:x="1670" fg:w="2"/><text x="89.2218%" y="255.50"></text></g><g><title>tiny`core::intrinsics::copy_nonoverlapping::precondition_check (3 samples, 0.16%)</title><rect x="88.9718%" y="261" width="0.1598%" height="15" fill="rgb(230,138,44)" fg:x="1670" fg:w="3"/><text x="89.2218%" y="271.50"></text></g><g><title>tiny`core::ub_checks::is_nonoverlapping::runtime (1 samples, 0.05%)</title><rect x="89.0783%" y="245" width="0.0533%" height="15" fill="rgb(235,182,43)" fg:x="1672" fg:w="1"/><text x="89.3283%" y="255.50"></text></g><g><title>tiny`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.27%)</title><rect x="88.9185%" y="277" width="0.2664%" height="15" fill="rgb(242,16,51)" fg:x="1669" fg:w="5"/><text x="89.1685%" y="287.50"></text></g><g><title>tiny`core::ub_checks::is_nonoverlapping::runtime (1 samples, 0.05%)</title><rect x="89.1316%" y="261" width="0.0533%" height="15" fill="rgb(248,9,4)" fg:x="1673" fg:w="1"/><text x="89.3816%" y="271.50"></text></g><g><title>tiny`core::hash::BuildHasher::hash_one (17 samples, 0.91%)</title><rect x="88.3324%" y="357" width="0.9057%" height="15" fill="rgb(210,31,22)" fg:x="1658" fg:w="17"/><text x="88.5824%" y="367.50"></text></g><g><title>tiny`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.32%)</title><rect x="88.9185%" y="341" width="0.3197%" height="15" fill="rgb(239,54,39)" fg:x="1669" fg:w="6"/><text x="89.1685%" y="351.50"></text></g><g><title>tiny`core::hash::impls::_&lt;impl core::hash::Hash for *const T&gt;::hash (6 samples, 0.32%)</title><rect x="88.9185%" y="325" width="0.3197%" height="15" fill="rgb(230,99,41)" fg:x="1669" fg:w="6"/><text x="89.1685%" y="335.50"></text></g><g><title>tiny`core::hash::Hasher::write_usize (6 samples, 0.32%)</title><rect x="88.9185%" y="309" width="0.3197%" height="15" fill="rgb(253,106,12)" fg:x="1669" fg:w="6"/><text x="89.1685%" y="319.50"></text></g><g><title>tiny`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.32%)</title><rect x="88.9185%" y="293" width="0.3197%" height="15" fill="rgb(213,46,41)" fg:x="1669" fg:w="6"/><text x="89.1685%" y="303.50"></text></g><g><title>tiny`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.05%)</title><rect x="89.1849%" y="277" width="0.0533%" height="15" fill="rgb(215,133,35)" fg:x="1674" fg:w="1"/><text x="89.4349%" y="287.50"></text></g><g><title>tiny`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.05%)</title><rect x="89.2381%" y="357" width="0.0533%" height="15" fill="rgb(213,28,5)" fg:x="1675" fg:w="1"/><text x="89.4881%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.05%)</title><rect x="89.3980%" y="325" width="0.0533%" height="15" fill="rgb(215,77,49)" fg:x="1678" fg:w="1"/><text x="89.6480%" y="335.50"></text></g><g><title>tiny`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="89.4513%" y="325" width="0.0533%" height="15" fill="rgb(248,100,22)" fg:x="1679" fg:w="1"/><text x="89.7013%" y="335.50"></text></g><g><title>tiny`DYLD-STUB$$memcpy (1 samples, 0.05%)</title><rect x="89.5045%" y="325" width="0.0533%" height="15" fill="rgb(208,67,9)" fg:x="1680" fg:w="1"/><text x="89.7545%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.05%)</title><rect x="89.8242%" y="309" width="0.0533%" height="15" fill="rgb(219,133,21)" fg:x="1686" fg:w="1"/><text x="90.0742%" y="319.50"></text></g><g><title>tiny`core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1 samples, 0.05%)</title><rect x="89.8775%" y="309" width="0.0533%" height="15" fill="rgb(246,46,29)" fg:x="1687" fg:w="1"/><text x="90.1275%" y="319.50"></text></g><g><title>tiny`core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (2 samples, 0.11%)</title><rect x="89.9307%" y="309" width="0.1066%" height="15" fill="rgb(246,185,52)" fg:x="1688" fg:w="2"/><text x="90.1807%" y="319.50"></text></g><g><title>tiny`&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.11%)</title><rect x="89.9307%" y="293" width="0.1066%" height="15" fill="rgb(252,136,11)" fg:x="1688" fg:w="2"/><text x="90.1807%" y="303.50"></text></g><g><title>tiny`hashbrown::raw::RawTableInner::prepare_resize::_{{closure}} (2 samples, 0.11%)</title><rect x="89.9307%" y="277" width="0.1066%" height="15" fill="rgb(219,138,53)" fg:x="1688" fg:w="2"/><text x="90.1807%" y="287.50"></text></g><g><title>tiny`hashbrown::raw::RawTableInner::allocation_info (1 samples, 0.05%)</title><rect x="89.9840%" y="261" width="0.0533%" height="15" fill="rgb(211,51,23)" fg:x="1689" fg:w="1"/><text x="90.2340%" y="271.50"></text></g><g><title>tiny`hashbrown::map::make_hasher::_{{closure}} (1 samples, 0.05%)</title><rect x="90.0373%" y="309" width="0.0533%" height="15" fill="rgb(247,221,28)" fg:x="1690" fg:w="1"/><text x="90.2873%" y="319.50"></text></g><g><title>tiny`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.05%)</title><rect x="90.0906%" y="309" width="0.0533%" height="15" fill="rgb(251,222,45)" fg:x="1691" fg:w="1"/><text x="90.3406%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.05%)</title><rect x="90.1971%" y="261" width="0.0533%" height="15" fill="rgb(217,162,53)" fg:x="1693" fg:w="1"/><text x="90.4471%" y="271.50"></text></g><g><title>tiny`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.16%)</title><rect x="90.2504%" y="261" width="0.1598%" height="15" fill="rgb(229,93,14)" fg:x="1694" fg:w="3"/><text x="90.5004%" y="271.50"></text></g><g><title>tiny`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.16%)</title><rect x="90.2504%" y="245" width="0.1598%" height="15" fill="rgb(209,67,49)" fg:x="1694" fg:w="3"/><text x="90.5004%" y="255.50"></text></g><g><title>tiny`&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.16%)</title><rect x="90.4102%" y="261" width="0.1598%" height="15" fill="rgb(213,87,29)" fg:x="1697" fg:w="3"/><text x="90.6602%" y="271.50"></text></g><g><title>tiny`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.11%)</title><rect x="90.5701%" y="197" width="0.1066%" height="15" fill="rgb(205,151,52)" fg:x="1700" fg:w="2"/><text x="90.8201%" y="207.50"></text></g><g><title>tiny`core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.05%)</title><rect x="90.6233%" y="181" width="0.0533%" height="15" fill="rgb(253,215,39)" fg:x="1701" fg:w="1"/><text x="90.8733%" y="191.50"></text></g><g><title>tiny`core::ub_checks::is_aligned_and_not_null (1 samples, 0.05%)</title><rect x="90.6233%" y="165" width="0.0533%" height="15" fill="rgb(221,220,41)" fg:x="1701" fg:w="1"/><text x="90.8733%" y="175.50"></text></g><g><title>tiny`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (11 samples, 0.59%)</title><rect x="90.1438%" y="309" width="0.5860%" height="15" fill="rgb(218,133,21)" fg:x="1692" fg:w="11"/><text x="90.3938%" y="319.50"></text></g><g><title>tiny`hashbrown::map::make_hasher::_{{closure}} (11 samples, 0.59%)</title><rect x="90.1438%" y="293" width="0.5860%" height="15" fill="rgb(221,193,43)" fg:x="1692" fg:w="11"/><text x="90.3938%" y="303.50"></text></g><g><title>tiny`core::hash::BuildHasher::hash_one (10 samples, 0.53%)</title><rect x="90.1971%" y="277" width="0.5328%" height="15" fill="rgb(240,128,52)" fg:x="1693" fg:w="10"/><text x="90.4471%" y="287.50"></text></g><g><title>tiny`core::hash::impls::_&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.16%)</title><rect x="90.5701%" y="261" width="0.1598%" height="15" fill="rgb(253,114,12)" fg:x="1700" fg:w="3"/><text x="90.8201%" y="271.50"></text></g><g><title>tiny`core::hash::impls::_&lt;impl core::hash::Hash for *const T&gt;::hash (3 samples, 0.16%)</title><rect x="90.5701%" y="245" width="0.1598%" height="15" fill="rgb(215,223,47)" fg:x="1700" fg:w="3"/><text x="90.8201%" y="255.50"></text></g><g><title>tiny`core::hash::Hasher::write_usize (3 samples, 0.16%)</title><rect x="90.5701%" y="229" width="0.1598%" height="15" fill="rgb(248,225,23)" fg:x="1700" fg:w="3"/><text x="90.8201%" y="239.50"></text></g><g><title>tiny`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.16%)</title><rect x="90.5701%" y="213" width="0.1598%" height="15" fill="rgb(250,108,0)" fg:x="1700" fg:w="3"/><text x="90.8201%" y="223.50"></text></g><g><title>tiny`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.05%)</title><rect x="90.6766%" y="197" width="0.0533%" height="15" fill="rgb(228,208,7)" fg:x="1702" fg:w="1"/><text x="90.9266%" y="207.50"></text></g><g><title>tiny`core::core_arch::aarch64::neon::vld1_u8 (3 samples, 0.16%)</title><rect x="90.7832%" y="277" width="0.1598%" height="15" fill="rgb(244,45,10)" fg:x="1704" fg:w="3"/><text x="91.0332%" y="287.50"></text></g><g><title>tiny`core::ptr::read_unaligned (3 samples, 0.16%)</title><rect x="90.7832%" y="261" width="0.1598%" height="15" fill="rgb(207,125,25)" fg:x="1704" fg:w="3"/><text x="91.0332%" y="271.50"></text></g><g><title>tiny`core::intrinsics::copy_nonoverlapping::precondition_check (3 samples, 0.16%)</title><rect x="90.7832%" y="245" width="0.1598%" height="15" fill="rgb(210,195,18)" fg:x="1704" fg:w="3"/><text x="91.0332%" y="255.50"></text></g><g><title>tiny`core::ub_checks::is_nonoverlapping::runtime (2 samples, 0.11%)</title><rect x="90.8364%" y="229" width="0.1066%" height="15" fill="rgb(249,80,12)" fg:x="1705" fg:w="2"/><text x="91.0864%" y="239.50"></text></g><g><title>tiny`hashbrown::raw::RawTableInner::prepare_insert_slot (8 samples, 0.43%)</title><rect x="90.7299%" y="309" width="0.4262%" height="15" fill="rgb(221,65,9)" fg:x="1703" fg:w="8"/><text x="90.9799%" y="319.50"></text></g><g><title>tiny`hashbrown::raw::RawTableInner::find_insert_slot (8 samples, 0.43%)</title><rect x="90.7299%" y="293" width="0.4262%" height="15" fill="rgb(235,49,36)" fg:x="1703" fg:w="8"/><text x="90.9799%" y="303.50"></text></g><g><title>tiny`hashbrown::raw::RawTableInner::find_insert_slot_in_group (4 samples, 0.21%)</title><rect x="90.9430%" y="277" width="0.2131%" height="15" fill="rgb(225,32,20)" fg:x="1707" fg:w="4"/><text x="91.1930%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.05%)</title><rect x="91.2627%" y="293" width="0.0533%" height="15" fill="rgb(215,141,46)" fg:x="1713" fg:w="1"/><text x="91.5127%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.05%)</title><rect x="91.5290%" y="213" width="0.0533%" height="15" fill="rgb(250,160,47)" fg:x="1718" fg:w="1"/><text x="91.7790%" y="223.50"></text></g><g><title>tiny`__rdl_alloc (1 samples, 0.05%)</title><rect x="91.5823%" y="213" width="0.0533%" height="15" fill="rgb(216,222,40)" fg:x="1719" fg:w="1"/><text x="91.8323%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.05%)</title><rect x="91.6356%" y="165" width="0.0533%" height="15" fill="rgb(234,217,39)" fg:x="1720" fg:w="1"/><text x="91.8856%" y="175.50"></text></g><g><title>tiny`hashbrown::raw::RawTableInner::new_uninitialized (5 samples, 0.27%)</title><rect x="91.4758%" y="277" width="0.2664%" height="15" fill="rgb(207,178,40)" fg:x="1717" fg:w="5"/><text x="91.7258%" y="287.50"></text></g><g><title>tiny`hashbrown::raw::alloc::inner::do_alloc (4 samples, 0.21%)</title><rect x="91.5290%" y="261" width="0.2131%" height="15" fill="rgb(221,136,13)" fg:x="1718" fg:w="4"/><text x="91.7790%" y="271.50"></text></g><g><title>tiny`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.21%)</title><rect x="91.5290%" y="245" width="0.2131%" height="15" fill="rgb(249,199,10)" fg:x="1718" fg:w="4"/><text x="91.7790%" y="255.50"></text></g><g><title>tiny`alloc::alloc::Global::alloc_impl (4 samples, 0.21%)</title><rect x="91.5290%" y="229" width="0.2131%" height="15" fill="rgb(249,222,13)" fg:x="1718" fg:w="4"/><text x="91.7790%" y="239.50"></text></g><g><title>tiny`alloc::alloc::alloc (2 samples, 0.11%)</title><rect x="91.6356%" y="213" width="0.1066%" height="15" fill="rgb(244,185,38)" fg:x="1720" fg:w="2"/><text x="91.8856%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.11%)</title><rect x="91.6356%" y="197" width="0.1066%" height="15" fill="rgb(236,202,9)" fg:x="1720" fg:w="2"/><text x="91.8856%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.11%)</title><rect x="91.6356%" y="181" width="0.1066%" height="15" fill="rgb(250,229,37)" fg:x="1720" fg:w="2"/><text x="91.8856%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.05%)</title><rect x="91.6889%" y="165" width="0.0533%" height="15" fill="rgb(206,174,23)" fg:x="1721" fg:w="1"/><text x="91.9389%" y="175.50"></text></g><g><title>tiny`hashbrown::raw::RawTable&lt;T,A&gt;::reserve (46 samples, 2.45%)</title><rect x="89.3447%" y="341" width="2.4507%" height="15" fill="rgb(211,33,43)" fg:x="1677" fg:w="46"/><text x="89.5947%" y="351.50">ti..</text></g><g><title>tiny`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (42 samples, 2.24%)</title><rect x="89.5578%" y="325" width="2.2376%" height="15" fill="rgb(245,58,50)" fg:x="1681" fg:w="42"/><text x="89.8078%" y="335.50">t..</text></g><g><title>tiny`hashbrown::raw::RawTableInner::prepare_resize (12 samples, 0.64%)</title><rect x="91.1561%" y="309" width="0.6393%" height="15" fill="rgb(244,68,36)" fg:x="1711" fg:w="12"/><text x="91.4061%" y="319.50"></text></g><g><title>tiny`hashbrown::raw::RawTableInner::fallible_with_capacity (9 samples, 0.48%)</title><rect x="91.3159%" y="293" width="0.4795%" height="15" fill="rgb(232,229,15)" fg:x="1714" fg:w="9"/><text x="91.5659%" y="303.50"></text></g><g><title>tiny`hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.05%)</title><rect x="91.7421%" y="277" width="0.0533%" height="15" fill="rgb(254,30,23)" fg:x="1722" fg:w="1"/><text x="91.9921%" y="287.50"></text></g><g><title>tiny`core::core_arch::aarch64::neon::vld1_u8 (2 samples, 0.11%)</title><rect x="91.8487%" y="325" width="0.1066%" height="15" fill="rgb(235,160,14)" fg:x="1724" fg:w="2"/><text x="92.0987%" y="335.50"></text></g><g><title>tiny`core::ptr::read_unaligned (2 samples, 0.11%)</title><rect x="91.8487%" y="309" width="0.1066%" height="15" fill="rgb(212,155,44)" fg:x="1724" fg:w="2"/><text x="92.0987%" y="319.50"></text></g><g><title>tiny`core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.11%)</title><rect x="91.8487%" y="293" width="0.1066%" height="15" fill="rgb(226,2,50)" fg:x="1724" fg:w="2"/><text x="92.0987%" y="303.50"></text></g><g><title>tiny`core::ub_checks::is_aligned_and_not_null (1 samples, 0.05%)</title><rect x="91.9020%" y="277" width="0.0533%" height="15" fill="rgb(234,177,6)" fg:x="1725" fg:w="1"/><text x="92.1520%" y="287.50"></text></g><g><title>tiny`core::core_arch::arm_shared::neon::vdup_n_u8 (1 samples, 0.05%)</title><rect x="91.9552%" y="325" width="0.0533%" height="15" fill="rgb(217,24,9)" fg:x="1726" fg:w="1"/><text x="92.2052%" y="335.50"></text></g><g><title>tiny`core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (2 samples, 0.11%)</title><rect x="92.0085%" y="309" width="0.1066%" height="15" fill="rgb(220,13,46)" fg:x="1727" fg:w="2"/><text x="92.2585%" y="319.50"></text></g><g><title>tiny`hashbrown::raw::RawTableInner::find_insert_slot_in_group (5 samples, 0.27%)</title><rect x="92.0085%" y="325" width="0.2664%" height="15" fill="rgb(239,221,27)" fg:x="1727" fg:w="5"/><text x="92.2585%" y="335.50"></text></g><g><title>tiny`core::core_arch::arm_shared::neon::vget_lane_u64 (3 samples, 0.16%)</title><rect x="92.1151%" y="309" width="0.1598%" height="15" fill="rgb(222,198,25)" fg:x="1729" fg:w="3"/><text x="92.3651%" y="319.50"></text></g><g><title>tiny`hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (59 samples, 3.14%)</title><rect x="89.2914%" y="357" width="3.1433%" height="15" fill="rgb(211,99,13)" fg:x="1676" fg:w="59"/><text x="89.5414%" y="367.50">tin..</text></g><g><title>tiny`hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (12 samples, 0.64%)</title><rect x="91.7954%" y="341" width="0.6393%" height="15" fill="rgb(232,111,31)" fg:x="1723" fg:w="12"/><text x="92.0454%" y="351.50"></text></g><g><title>tiny`hashbrown::raw::RawTableInner::fix_insert_slot (3 samples, 0.16%)</title><rect x="92.2749%" y="325" width="0.1598%" height="15" fill="rgb(245,82,37)" fg:x="1732" fg:w="3"/><text x="92.5249%" y="335.50"></text></g><g><title>tiny`core::core_arch::aarch64::neon::vld1_u8 (1 samples, 0.05%)</title><rect x="92.3815%" y="309" width="0.0533%" height="15" fill="rgb(227,149,46)" fg:x="1734" fg:w="1"/><text x="92.6315%" y="319.50"></text></g><g><title>tiny`core::ptr::read_unaligned (1 samples, 0.05%)</title><rect x="92.3815%" y="293" width="0.0533%" height="15" fill="rgb(218,36,50)" fg:x="1734" fg:w="1"/><text x="92.6315%" y="303.50"></text></g><g><title>tiny`core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.05%)</title><rect x="92.3815%" y="277" width="0.0533%" height="15" fill="rgb(226,80,48)" fg:x="1734" fg:w="1"/><text x="92.6315%" y="287.50"></text></g><g><title>tiny`core::ub_checks::is_aligned_and_not_null (1 samples, 0.05%)</title><rect x="92.3815%" y="261" width="0.0533%" height="15" fill="rgb(238,224,15)" fg:x="1734" fg:w="1"/><text x="92.6315%" y="271.50"></text></g><g><title>tiny`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (79 samples, 4.21%)</title><rect x="88.2792%" y="389" width="4.2088%" height="15" fill="rgb(241,136,10)" fg:x="1657" fg:w="79"/><text x="88.5292%" y="399.50">tiny`..</text></g><g><title>tiny`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (79 samples, 4.21%)</title><rect x="88.2792%" y="373" width="4.2088%" height="15" fill="rgb(208,32,45)" fg:x="1657" fg:w="79"/><text x="88.5292%" y="383.50">tiny`..</text></g><g><title>tiny`hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.05%)</title><rect x="92.4347%" y="357" width="0.0533%" height="15" fill="rgb(207,135,9)" fg:x="1735" fg:w="1"/><text x="92.6847%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.05%)</title><rect x="92.4880%" y="373" width="0.0533%" height="15" fill="rgb(206,86,44)" fg:x="1736" fg:w="1"/><text x="92.7380%" y="383.50"></text></g><g><title>tiny`core::core_arch::aarch64::neon::generated::vcgez_s8 (1 samples, 0.05%)</title><rect x="92.5946%" y="341" width="0.0533%" height="15" fill="rgb(245,177,15)" fg:x="1738" fg:w="1"/><text x="92.8446%" y="351.50"></text></g><g><title>tiny`core::core_arch::aarch64::neon::vld1_u8 (1 samples, 0.05%)</title><rect x="92.6478%" y="341" width="0.0533%" height="15" fill="rgb(206,64,50)" fg:x="1739" fg:w="1"/><text x="92.8978%" y="351.50"></text></g><g><title>tiny`core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (2 samples, 0.11%)</title><rect x="92.7011%" y="341" width="0.1066%" height="15" fill="rgb(234,36,40)" fg:x="1740" fg:w="2"/><text x="92.9511%" y="351.50"></text></g><g><title>tiny`std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (8 samples, 0.43%)</title><rect x="92.4880%" y="389" width="0.4262%" height="15" fill="rgb(213,64,8)" fg:x="1736" fg:w="8"/><text x="92.7380%" y="399.50"></text></g><g><title>tiny`hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (7 samples, 0.37%)</title><rect x="92.5413%" y="373" width="0.3729%" height="15" fill="rgb(210,75,36)" fg:x="1737" fg:w="7"/><text x="92.7913%" y="383.50"></text></g><g><title>tiny`hashbrown::raw::RawIterRange&lt;T&gt;::new (6 samples, 0.32%)</title><rect x="92.5946%" y="357" width="0.3197%" height="15" fill="rgb(229,88,21)" fg:x="1738" fg:w="6"/><text x="92.8446%" y="367.50"></text></g><g><title>tiny`core::core_arch::arm_shared::neon::vget_lane_u64 (2 samples, 0.11%)</title><rect x="92.8077%" y="341" width="0.1066%" height="15" fill="rgb(252,204,47)" fg:x="1742" fg:w="2"/><text x="93.0577%" y="351.50"></text></g><g><title>tiny`core::f64::_&lt;impl f64&gt;::max (7 samples, 0.37%)</title><rect x="93.3404%" y="373" width="0.3729%" height="15" fill="rgb(208,77,27)" fg:x="1752" fg:w="7"/><text x="93.5904%" y="383.50"></text></g><g><title>tiny`core::f64::_&lt;impl f64&gt;::min (10 samples, 0.53%)</title><rect x="93.7134%" y="373" width="0.5328%" height="15" fill="rgb(221,76,26)" fg:x="1759" fg:w="10"/><text x="93.9634%" y="383.50"></text></g><g><title>tiny`DYLD-STUB$$exp (6 samples, 0.32%)</title><rect x="94.4060%" y="357" width="0.3197%" height="15" fill="rgb(225,139,18)" fg:x="1772" fg:w="6"/><text x="94.6560%" y="367.50"></text></g><g><title>tiny`tiny::neuron::Neuron::dsigmoid (53 samples, 2.82%)</title><rect x="92.9142%" y="389" width="2.8237%" height="15" fill="rgb(230,137,11)" fg:x="1744" fg:w="53"/><text x="93.1642%" y="399.50">ti..</text></g><g><title>tiny`tiny::neuron::Neuron::sigmoid (28 samples, 1.49%)</title><rect x="94.2461%" y="373" width="1.4917%" height="15" fill="rgb(212,28,1)" fg:x="1769" fg:w="28"/><text x="94.4961%" y="383.50"></text></g><g><title>tiny`std::f64::_&lt;impl f64&gt;::exp (19 samples, 1.01%)</title><rect x="94.7256%" y="357" width="1.0123%" height="15" fill="rgb(248,164,17)" fg:x="1778" fg:w="19"/><text x="94.9756%" y="367.50"></text></g><g><title>libsystem_m.dylib`exp (16 samples, 0.85%)</title><rect x="94.8855%" y="341" width="0.8524%" height="15" fill="rgb(222,171,42)" fg:x="1781" fg:w="16"/><text x="95.1355%" y="351.50"></text></g><g><title>tiny`tiny::network::Network::backward (1,788 samples, 95.26%)</title><rect x="0.5860%" y="405" width="95.2584%" height="15" fill="rgb(243,84,45)" fg:x="11" fg:w="1788"/><text x="0.8360%" y="415.50">tiny`tiny::network::Network::backward</text></g><g><title>tiny`tiny::neuron::Neuron::sigmoid (2 samples, 0.11%)</title><rect x="95.7379%" y="389" width="0.1066%" height="15" fill="rgb(252,49,23)" fg:x="1797" fg:w="2"/><text x="95.9879%" y="399.50"></text></g><g><title>tiny`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (1 samples, 0.05%)</title><rect x="95.8444%" y="373" width="0.0533%" height="15" fill="rgb(215,19,7)" fg:x="1799" fg:w="1"/><text x="96.0944%" y="383.50"></text></g><g><title>tiny`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.11%)</title><rect x="95.9510%" y="277" width="0.1066%" height="15" fill="rgb(238,81,41)" fg:x="1801" fg:w="2"/><text x="96.2010%" y="287.50"></text></g><g><title>tiny`core::f64::_&lt;impl f64&gt;::max (5 samples, 0.27%)</title><rect x="96.4305%" y="213" width="0.2664%" height="15" fill="rgb(210,199,37)" fg:x="1810" fg:w="5"/><text x="96.6805%" y="223.50"></text></g><g><title>tiny`core::f64::_&lt;impl f64&gt;::min (2 samples, 0.11%)</title><rect x="96.6969%" y="213" width="0.1066%" height="15" fill="rgb(244,192,49)" fg:x="1815" fg:w="2"/><text x="96.9469%" y="223.50"></text></g><g><title>tiny`core::iter::adapters::map::map_fold::_{{closure}} (12 samples, 0.64%)</title><rect x="96.2706%" y="245" width="0.6393%" height="15" fill="rgb(226,211,11)" fg:x="1807" fg:w="12"/><text x="96.5206%" y="255.50"></text></g><g><title>tiny`tiny::neuron::Neuron::next_state::_{{closure}} (11 samples, 0.59%)</title><rect x="96.3239%" y="229" width="0.5860%" height="15" fill="rgb(236,162,54)" fg:x="1808" fg:w="11"/><text x="96.5739%" y="239.50"></text></g><g><title>tiny`tiny::neuron::Neuron::sigmoid (2 samples, 0.11%)</title><rect x="96.8034%" y="213" width="0.1066%" height="15" fill="rgb(220,229,9)" fg:x="1817" fg:w="2"/><text x="97.0534%" y="223.50"></text></g><g><title>tiny`std::f64::_&lt;impl f64&gt;::exp (1 samples, 0.05%)</title><rect x="96.8567%" y="197" width="0.0533%" height="15" fill="rgb(250,87,22)" fg:x="1818" fg:w="1"/><text x="97.1067%" y="207.50"></text></g><g><title>libsystem_m.dylib`exp (1 samples, 0.05%)</title><rect x="96.8567%" y="181" width="0.0533%" height="15" fill="rgb(239,43,17)" fg:x="1818" fg:w="1"/><text x="97.1067%" y="191.50"></text></g><g><title>tiny`&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold::_{{closure}} (14 samples, 0.75%)</title><rect x="96.2174%" y="261" width="0.7459%" height="15" fill="rgb(231,177,25)" fg:x="1806" fg:w="14"/><text x="96.4674%" y="271.50"></text></g><g><title>tiny`tiny::neuron::Neuron::next_state::_{{closure}} (1 samples, 0.05%)</title><rect x="96.9100%" y="245" width="0.0533%" height="15" fill="rgb(219,179,1)" fg:x="1819" fg:w="1"/><text x="97.1600%" y="255.50"></text></g><g><title>tiny`core::core_arch::aarch64::neon::vld1_u8 (1 samples, 0.05%)</title><rect x="96.9632%" y="261" width="0.0533%" height="15" fill="rgb(238,219,53)" fg:x="1820" fg:w="1"/><text x="97.2132%" y="271.50"></text></g><g><title>tiny`core::ptr::read_unaligned (1 samples, 0.05%)</title><rect x="96.9632%" y="245" width="0.0533%" height="15" fill="rgb(232,167,36)" fg:x="1820" fg:w="1"/><text x="97.2132%" y="255.50"></text></g><g><title>tiny`core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.05%)</title><rect x="96.9632%" y="229" width="0.0533%" height="15" fill="rgb(244,19,51)" fg:x="1820" fg:w="1"/><text x="97.2132%" y="239.50"></text></g><g><title>tiny`core::iter::traits::iterator::Iterator::sum (21 samples, 1.12%)</title><rect x="95.9510%" y="357" width="1.1188%" height="15" fill="rgb(224,6,22)" fg:x="1801" fg:w="21"/><text x="96.2010%" y="367.50"></text></g><g><title>tiny`&lt;f64 as core::iter::traits::accum::Sum&gt;::sum (21 samples, 1.12%)</title><rect x="95.9510%" y="341" width="1.1188%" height="15" fill="rgb(224,145,5)" fg:x="1801" fg:w="21"/><text x="96.2010%" y="351.50"></text></g><g><title>tiny`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 1.12%)</title><rect x="95.9510%" y="325" width="1.1188%" height="15" fill="rgb(234,130,49)" fg:x="1801" fg:w="21"/><text x="96.2010%" y="335.50"></text></g><g><title>tiny`&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 1.12%)</title><rect x="95.9510%" y="309" width="1.1188%" height="15" fill="rgb(254,6,2)" fg:x="1801" fg:w="21"/><text x="96.2010%" y="319.50"></text></g><g><title>tiny`&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 1.12%)</title><rect x="95.9510%" y="293" width="1.1188%" height="15" fill="rgb(208,96,46)" fg:x="1801" fg:w="21"/><text x="96.2010%" y="303.50"></text></g><g><title>tiny`hashbrown::raw::RawIterRange&lt;T&gt;::fold_impl (19 samples, 1.01%)</title><rect x="96.0575%" y="277" width="1.0123%" height="15" fill="rgb(239,3,39)" fg:x="1803" fg:w="19"/><text x="96.3075%" y="287.50"></text></g><g><title>tiny`core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.05%)</title><rect x="97.0165%" y="261" width="0.0533%" height="15" fill="rgb(233,210,1)" fg:x="1821" fg:w="1"/><text x="97.2665%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.05%)</title><rect x="97.0698%" y="341" width="0.0533%" height="15" fill="rgb(244,137,37)" fg:x="1822" fg:w="1"/><text x="97.3198%" y="351.50"></text></g><g><title>tiny`core::ub_checks::is_aligned_and_not_null (1 samples, 0.05%)</title><rect x="97.1231%" y="261" width="0.0533%" height="15" fill="rgb(240,136,2)" fg:x="1823" fg:w="1"/><text x="97.3731%" y="271.50"></text></g><g><title>tiny`tiny::network::Network::forward (26 samples, 1.39%)</title><rect x="95.8444%" y="405" width="1.3852%" height="15" fill="rgb(239,18,37)" fg:x="1799" fg:w="26"/><text x="96.0944%" y="415.50"></text></g><g><title>tiny`tiny::neuron::Neuron::euler_step (26 samples, 1.39%)</title><rect x="95.8444%" y="389" width="1.3852%" height="15" fill="rgb(218,185,22)" fg:x="1799" fg:w="26"/><text x="96.0944%" y="399.50"></text></g><g><title>tiny`tiny::neuron::Neuron::next_state (25 samples, 1.33%)</title><rect x="95.8977%" y="373" width="1.3319%" height="15" fill="rgb(225,218,4)" fg:x="1800" fg:w="25"/><text x="96.1477%" y="383.50"></text></g><g><title>tiny`std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (3 samples, 0.16%)</title><rect x="97.0698%" y="357" width="0.1598%" height="15" fill="rgb(230,182,32)" fg:x="1822" fg:w="3"/><text x="97.3198%" y="367.50"></text></g><g><title>tiny`hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (2 samples, 0.11%)</title><rect x="97.1231%" y="341" width="0.1066%" height="15" fill="rgb(242,56,43)" fg:x="1823" fg:w="2"/><text x="97.3731%" y="351.50"></text></g><g><title>tiny`hashbrown::raw::RawIterRange&lt;T&gt;::new (2 samples, 0.11%)</title><rect x="97.1231%" y="325" width="0.1066%" height="15" fill="rgb(233,99,24)" fg:x="1823" fg:w="2"/><text x="97.3731%" y="335.50"></text></g><g><title>tiny`core::core_arch::aarch64::neon::vld1_u8 (2 samples, 0.11%)</title><rect x="97.1231%" y="309" width="0.1066%" height="15" fill="rgb(234,209,42)" fg:x="1823" fg:w="2"/><text x="97.3731%" y="319.50"></text></g><g><title>tiny`core::ptr::read_unaligned (2 samples, 0.11%)</title><rect x="97.1231%" y="293" width="0.1066%" height="15" fill="rgb(227,7,12)" fg:x="1823" fg:w="2"/><text x="97.3731%" y="303.50"></text></g><g><title>tiny`core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.11%)</title><rect x="97.1231%" y="277" width="0.1066%" height="15" fill="rgb(245,203,43)" fg:x="1823" fg:w="2"/><text x="97.3731%" y="287.50"></text></g><g><title>tiny`core::ub_checks::is_nonoverlapping::runtime (1 samples, 0.05%)</title><rect x="97.1763%" y="261" width="0.0533%" height="15" fill="rgb(238,205,33)" fg:x="1824" fg:w="1"/><text x="97.4263%" y="271.50"></text></g><g><title>tiny`tiny::network::Network::step (1,824 samples, 97.18%)</title><rect x="0.1066%" y="421" width="97.1763%" height="15" fill="rgb(231,56,7)" fg:x="2" fg:w="1824"/><text x="0.3566%" y="431.50">tiny`tiny::network::Network::step</text></g><g><title>tiny`tiny::neuron::Neuron::dsigmoid (1 samples, 0.05%)</title><rect x="97.2296%" y="405" width="0.0533%" height="15" fill="rgb(244,186,29)" fg:x="1825" fg:w="1"/><text x="97.4796%" y="415.50"></text></g><g><title>tiny`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.05%)</title><rect x="97.2829%" y="405" width="0.0533%" height="15" fill="rgb(234,111,31)" fg:x="1826" fg:w="1"/><text x="97.5329%" y="415.50"></text></g><g><title>tiny`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.05%)</title><rect x="97.2829%" y="389" width="0.0533%" height="15" fill="rgb(241,149,10)" fg:x="1826" fg:w="1"/><text x="97.5329%" y="399.50"></text></g><g><title>tiny`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="97.2829%" y="373" width="0.0533%" height="15" fill="rgb(249,206,44)" fg:x="1826" fg:w="1"/><text x="97.5329%" y="383.50"></text></g><g><title>tiny`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.05%)</title><rect x="97.2829%" y="357" width="0.0533%" height="15" fill="rgb(251,153,30)" fg:x="1826" fg:w="1"/><text x="97.5329%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.05%)</title><rect x="97.2829%" y="341" width="0.0533%" height="15" fill="rgb(239,152,38)" fg:x="1826" fg:w="1"/><text x="97.5329%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.05%)</title><rect x="97.2829%" y="325" width="0.0533%" height="15" fill="rgb(249,139,47)" fg:x="1826" fg:w="1"/><text x="97.5329%" y="335.50"></text></g><g><title>tiny`serde_json::ser::to_vec (1 samples, 0.05%)</title><rect x="97.3362%" y="405" width="0.0533%" height="15" fill="rgb(244,64,35)" fg:x="1827" fg:w="1"/><text x="97.5862%" y="415.50"></text></g><g><title>tiny`serde_json::ser::to_writer (1 samples, 0.05%)</title><rect x="97.3362%" y="389" width="0.0533%" height="15" fill="rgb(216,46,15)" fg:x="1827" fg:w="1"/><text x="97.5862%" y="399.50"></text></g><g><title>tiny`tiny::api::_::_&lt;impl serde::ser::Serialize for tiny::api::OutputFrame&gt;::serialize (1 samples, 0.05%)</title><rect x="97.3362%" y="373" width="0.0533%" height="15" fill="rgb(250,74,19)" fg:x="1827" fg:w="1"/><text x="97.5862%" y="383.50"></text></g><g><title>tiny`&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.05%)</title><rect x="97.3362%" y="357" width="0.0533%" height="15" fill="rgb(249,42,33)" fg:x="1827" fg:w="1"/><text x="97.5862%" y="367.50"></text></g><g><title>tiny`serde::ser::SerializeMap::serialize_entry (1 samples, 0.05%)</title><rect x="97.3362%" y="341" width="0.0533%" height="15" fill="rgb(242,149,17)" fg:x="1827" fg:w="1"/><text x="97.5862%" y="351.50"></text></g><g><title>tiny`&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.05%)</title><rect x="97.3362%" y="325" width="0.0533%" height="15" fill="rgb(244,29,21)" fg:x="1827" fg:w="1"/><text x="97.5862%" y="335.50"></text></g><g><title>tiny`serde::ser::impls::_&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (1 samples, 0.05%)</title><rect x="97.3362%" y="309" width="0.0533%" height="15" fill="rgb(220,130,37)" fg:x="1827" fg:w="1"/><text x="97.5862%" y="319.50"></text></g><g><title>tiny`serde::ser::Serializer::collect_seq (1 samples, 0.05%)</title><rect x="97.3362%" y="293" width="0.0533%" height="15" fill="rgb(211,67,2)" fg:x="1827" fg:w="1"/><text x="97.5862%" y="303.50"></text></g><g><title>tiny`core::iter::traits::iterator::Iterator::try_for_each (1 samples, 0.05%)</title><rect x="97.3362%" y="277" width="0.0533%" height="15" fill="rgb(235,68,52)" fg:x="1827" fg:w="1"/><text x="97.5862%" y="287.50"></text></g><g><title>tiny`core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.05%)</title><rect x="97.3362%" y="261" width="0.0533%" height="15" fill="rgb(246,142,3)" fg:x="1827" fg:w="1"/><text x="97.5862%" y="271.50"></text></g><g><title>tiny`core::iter::traits::iterator::Iterator::try_for_each::call::_{{closure}} (1 samples, 0.05%)</title><rect x="97.3362%" y="245" width="0.0533%" height="15" fill="rgb(241,25,7)" fg:x="1827" fg:w="1"/><text x="97.5862%" y="255.50"></text></g><g><title>tiny`serde::ser::Serializer::collect_seq::_{{closure}} (1 samples, 0.05%)</title><rect x="97.3362%" y="229" width="0.0533%" height="15" fill="rgb(242,119,39)" fg:x="1827" fg:w="1"/><text x="97.5862%" y="239.50"></text></g><g><title>tiny`&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeSeq&gt;::serialize_element (1 samples, 0.05%)</title><rect x="97.3362%" y="213" width="0.0533%" height="15" fill="rgb(241,98,45)" fg:x="1827" fg:w="1"/><text x="97.5862%" y="223.50"></text></g><g><title>tiny`serde::ser::impls::_&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.05%)</title><rect x="97.3362%" y="197" width="0.0533%" height="15" fill="rgb(254,28,30)" fg:x="1827" fg:w="1"/><text x="97.5862%" y="207.50"></text></g><g><title>tiny`serde::ser::impls::_&lt;impl serde::ser::Serialize for f64&gt;::serialize (1 samples, 0.05%)</title><rect x="97.3362%" y="181" width="0.0533%" height="15" fill="rgb(241,142,54)" fg:x="1827" fg:w="1"/><text x="97.5862%" y="191.50"></text></g><g><title>tiny`&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_f64 (1 samples, 0.05%)</title><rect x="97.3362%" y="165" width="0.0533%" height="15" fill="rgb(222,85,15)" fg:x="1827" fg:w="1"/><text x="97.5862%" y="175.50"></text></g><g><title>tiny`serde_json::ser::Formatter::write_f64 (1 samples, 0.05%)</title><rect x="97.3362%" y="149" width="0.0533%" height="15" fill="rgb(210,85,47)" fg:x="1827" fg:w="1"/><text x="97.5862%" y="159.50"></text></g><g><title>tiny`ryu::buffer::Buffer::format_finite (1 samples, 0.05%)</title><rect x="97.3362%" y="133" width="0.0533%" height="15" fill="rgb(224,206,25)" fg:x="1827" fg:w="1"/><text x="97.5862%" y="143.50"></text></g><g><title>tiny`&lt;f64 as ryu::buffer::Sealed&gt;::write_to_ryu_buffer (1 samples, 0.05%)</title><rect x="97.3362%" y="117" width="0.0533%" height="15" fill="rgb(243,201,19)" fg:x="1827" fg:w="1"/><text x="97.5862%" y="127.50"></text></g><g><title>tiny`ryu::pretty::format64 (1 samples, 0.05%)</title><rect x="97.3362%" y="101" width="0.0533%" height="15" fill="rgb(236,59,4)" fg:x="1827" fg:w="1"/><text x="97.5862%" y="111.50"></text></g><g><title>tiny`ryu::pretty::mantissa::write_mantissa_long (1 samples, 0.05%)</title><rect x="97.3362%" y="85" width="0.0533%" height="15" fill="rgb(254,179,45)" fg:x="1827" fg:w="1"/><text x="97.5862%" y="95.50"></text></g><g><title>tiny`ryu::pretty::mantissa::write_mantissa (1 samples, 0.05%)</title><rect x="97.3362%" y="69" width="0.0533%" height="15" fill="rgb(226,14,10)" fg:x="1827" fg:w="1"/><text x="97.5862%" y="79.50"></text></g><g><title>tiny`core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.05%)</title><rect x="97.3362%" y="53" width="0.0533%" height="15" fill="rgb(244,27,41)" fg:x="1827" fg:w="1"/><text x="97.5862%" y="63.50"></text></g><g><title>tiny`core::ub_checks::is_nonoverlapping::runtime (1 samples, 0.05%)</title><rect x="97.3362%" y="37" width="0.0533%" height="15" fill="rgb(235,35,32)" fg:x="1827" fg:w="1"/><text x="97.5862%" y="47.50"></text></g><g><title>tiny`tiny::rx_tx::pack_push_sock (3 samples, 0.16%)</title><rect x="97.2829%" y="421" width="0.1598%" height="15" fill="rgb(218,68,31)" fg:x="1826" fg:w="3"/><text x="97.5329%" y="431.50"></text></g><g><title>tiny`zmq::Socket::send_multipart (1 samples, 0.05%)</title><rect x="97.3895%" y="405" width="0.0533%" height="15" fill="rgb(207,120,37)" fg:x="1828" fg:w="1"/><text x="97.6395%" y="415.50"></text></g><g><title>tiny`zmq::Socket::send (1 samples, 0.05%)</title><rect x="97.3895%" y="389" width="0.0533%" height="15" fill="rgb(227,98,0)" fg:x="1828" fg:w="1"/><text x="97.6395%" y="399.50"></text></g><g><title>tiny`&lt;T as zmq::Sendable&gt;::send (1 samples, 0.05%)</title><rect x="97.3895%" y="373" width="0.0533%" height="15" fill="rgb(207,7,3)" fg:x="1828" fg:w="1"/><text x="97.6395%" y="383.50"></text></g><g><title>tiny`zmq_msg_send (1 samples, 0.05%)</title><rect x="97.3895%" y="357" width="0.0533%" height="15" fill="rgb(206,98,19)" fg:x="1828" fg:w="1"/><text x="97.6395%" y="367.50"></text></g><g><title>tiny`s_sendmsg(zmq::socket_base_t*, zmq_msg_t*, int) (1 samples, 0.05%)</title><rect x="97.3895%" y="341" width="0.0533%" height="15" fill="rgb(217,5,26)" fg:x="1828" fg:w="1"/><text x="97.6395%" y="351.50"></text></g><g><title>tiny`zmq::socket_base_t::send (1 samples, 0.05%)</title><rect x="97.3895%" y="325" width="0.0533%" height="15" fill="rgb(235,190,38)" fg:x="1828" fg:w="1"/><text x="97.6395%" y="335.50"></text></g><g><title>tiny`zmq::lb_t::send (1 samples, 0.05%)</title><rect x="97.3895%" y="309" width="0.0533%" height="15" fill="rgb(247,86,24)" fg:x="1828" fg:w="1"/><text x="97.6395%" y="319.50"></text></g><g><title>tiny`alloc::string::String::from_utf8 (1 samples, 0.05%)</title><rect x="97.4427%" y="405" width="0.0533%" height="15" fill="rgb(205,101,16)" fg:x="1829" fg:w="1"/><text x="97.6927%" y="415.50"></text></g><g><title>tiny`core::str::converts::from_utf8 (1 samples, 0.05%)</title><rect x="97.4427%" y="389" width="0.0533%" height="15" fill="rgb(246,168,33)" fg:x="1829" fg:w="1"/><text x="97.6927%" y="399.50"></text></g><g><title>tiny`tiny::rx_tx::unpack_pull_sock (2 samples, 0.11%)</title><rect x="97.4427%" y="421" width="0.1066%" height="15" fill="rgb(231,114,1)" fg:x="1829" fg:w="2"/><text x="97.6927%" y="431.50"></text></g><g><title>tiny`zmq::Socket::recv_multipart (1 samples, 0.05%)</title><rect x="97.4960%" y="405" width="0.0533%" height="15" fill="rgb(207,184,53)" fg:x="1830" fg:w="1"/><text x="97.7460%" y="415.50"></text></g><g><title>tiny`zmq::Socket::recv_bytes (1 samples, 0.05%)</title><rect x="97.4960%" y="389" width="0.0533%" height="15" fill="rgb(224,95,51)" fg:x="1830" fg:w="1"/><text x="97.7460%" y="399.50"></text></g><g><title>tiny`zmq::Socket::recv_msg (1 samples, 0.05%)</title><rect x="97.4960%" y="373" width="0.0533%" height="15" fill="rgb(212,188,45)" fg:x="1830" fg:w="1"/><text x="97.7460%" y="383.50"></text></g><g><title>tiny`zmq::Socket::recv (1 samples, 0.05%)</title><rect x="97.4960%" y="357" width="0.0533%" height="15" fill="rgb(223,154,38)" fg:x="1830" fg:w="1"/><text x="97.7460%" y="367.50"></text></g><g><title>tiny`zmq_msg_recv (1 samples, 0.05%)</title><rect x="97.4960%" y="341" width="0.0533%" height="15" fill="rgb(251,22,52)" fg:x="1830" fg:w="1"/><text x="97.7460%" y="351.50"></text></g><g><title>tiny`s_recvmsg(zmq::socket_base_t*, zmq_msg_t*, int) (1 samples, 0.05%)</title><rect x="97.4960%" y="325" width="0.0533%" height="15" fill="rgb(229,209,22)" fg:x="1830" fg:w="1"/><text x="97.7460%" y="335.50"></text></g><g><title>tiny`zmq::pull_t::xrecv (1 samples, 0.05%)</title><rect x="97.4960%" y="309" width="0.0533%" height="15" fill="rgb(234,138,34)" fg:x="1830" fg:w="1"/><text x="97.7460%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`poll (37 samples, 1.97%)</title><rect x="97.5493%" y="405" width="1.9712%" height="15" fill="rgb(212,95,11)" fg:x="1831" fg:w="37"/><text x="97.7993%" y="415.50">l..</text></g><g><title>tiny`zmq::socket_base_t::process_commands (2 samples, 0.11%)</title><rect x="99.5205%" y="357" width="0.1066%" height="15" fill="rgb(240,179,47)" fg:x="1868" fg:w="2"/><text x="99.7705%" y="367.50"></text></g><g><title>tiny`zmq::mailbox_t::recv (2 samples, 0.11%)</title><rect x="99.5205%" y="341" width="0.1066%" height="15" fill="rgb(240,163,11)" fg:x="1868" fg:w="2"/><text x="99.7705%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`poll (2 samples, 0.11%)</title><rect x="99.5205%" y="325" width="0.1066%" height="15" fill="rgb(236,37,12)" fg:x="1868" fg:w="2"/><text x="99.7705%" y="335.50"></text></g><g><title>dyld`start (1,871 samples, 99.68%)</title><rect x="0.0000%" y="565" width="99.6803%" height="15" fill="rgb(232,164,16)" fg:x="0" fg:w="1871"/><text x="0.2500%" y="575.50">dyld`start</text></g><g><title>tiny`main (1,871 samples, 99.68%)</title><rect x="0.0000%" y="549" width="99.6803%" height="15" fill="rgb(244,205,15)" fg:x="0" fg:w="1871"/><text x="0.2500%" y="559.50">tiny`main</text></g><g><title>tiny`std::rt::lang_start (1,871 samples, 99.68%)</title><rect x="0.0000%" y="533" width="99.6803%" height="15" fill="rgb(223,117,47)" fg:x="0" fg:w="1871"/><text x="0.2500%" y="543.50">tiny`std::rt::lang_start</text></g><g><title>tiny`std::rt::lang_start_internal (1,871 samples, 99.68%)</title><rect x="0.0000%" y="517" width="99.6803%" height="15" fill="rgb(244,107,35)" fg:x="0" fg:w="1871"/><text x="0.2500%" y="527.50">tiny`std::rt::lang_start_internal</text></g><g><title>tiny`std::rt::lang_start::_{{closure}} (1,871 samples, 99.68%)</title><rect x="0.0000%" y="501" width="99.6803%" height="15" fill="rgb(205,140,8)" fg:x="0" fg:w="1871"/><text x="0.2500%" y="511.50">tiny`std::rt::lang_start::_{{closure}}</text></g><g><title>tiny`std::sys_common::backtrace::__rust_begin_short_backtrace (1,871 samples, 99.68%)</title><rect x="0.0000%" y="485" width="99.6803%" height="15" fill="rgb(228,84,46)" fg:x="0" fg:w="1871"/><text x="0.2500%" y="495.50">tiny`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tiny`core::ops::function::FnOnce::call_once (1,871 samples, 99.68%)</title><rect x="0.0000%" y="469" width="99.6803%" height="15" fill="rgb(254,188,9)" fg:x="0" fg:w="1871"/><text x="0.2500%" y="479.50">tiny`core::ops::function::FnOnce::call_once</text></g><g><title>tiny`tiny::main (1,871 samples, 99.68%)</title><rect x="0.0000%" y="453" width="99.6803%" height="15" fill="rgb(206,112,54)" fg:x="0" fg:w="1871"/><text x="0.2500%" y="463.50">tiny`tiny::main</text></g><g><title>tiny`tiny::rx_tx::go (1,871 samples, 99.68%)</title><rect x="0.0000%" y="437" width="99.6803%" height="15" fill="rgb(216,84,49)" fg:x="0" fg:w="1871"/><text x="0.2500%" y="447.50">tiny`tiny::rx_tx::go</text></g><g><title>tiny`zmq::poll (40 samples, 2.13%)</title><rect x="97.5493%" y="421" width="2.1311%" height="15" fill="rgb(214,194,35)" fg:x="1831" fg:w="40"/><text x="97.7993%" y="431.50">t..</text></g><g><title>tiny`zmq_poll (3 samples, 0.16%)</title><rect x="99.5205%" y="405" width="0.1598%" height="15" fill="rgb(249,28,3)" fg:x="1868" fg:w="3"/><text x="99.7705%" y="415.50"></text></g><g><title>tiny`zmq_getsockopt (3 samples, 0.16%)</title><rect x="99.5205%" y="389" width="0.1598%" height="15" fill="rgb(222,56,52)" fg:x="1868" fg:w="3"/><text x="99.7705%" y="399.50"></text></g><g><title>tiny`zmq::socket_base_t::getsockopt (3 samples, 0.16%)</title><rect x="99.5205%" y="373" width="0.1598%" height="15" fill="rgb(245,217,50)" fg:x="1868" fg:w="3"/><text x="99.7705%" y="383.50"></text></g><g><title>tiny`zmq::socket_base_t::xhas_out (1 samples, 0.05%)</title><rect x="99.6271%" y="357" width="0.0533%" height="15" fill="rgb(213,201,24)" fg:x="1870" fg:w="1"/><text x="99.8771%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`poll (1 samples, 0.05%)</title><rect x="99.6803%" y="565" width="0.0533%" height="15" fill="rgb(248,116,28)" fg:x="1871" fg:w="1"/><text x="99.9303%" y="575.50"></text></g><g><title>libsystem_kernel.dylib`kevent (1 samples, 0.05%)</title><rect x="99.7336%" y="501" width="0.0533%" height="15" fill="rgb(219,72,43)" fg:x="1872" fg:w="1"/><text x="99.9836%" y="511.50"></text></g><g><title>tiny`zmq::encoder_base_t&lt;zmq::v3_1_encoder_t&gt;::encode (1 samples, 0.05%)</title><rect x="99.7869%" y="389" width="0.0533%" height="15" fill="rgb(209,138,14)" fg:x="1873" fg:w="1"/><text x="100.0369%" y="399.50"></text></g><g><title>tiny`unsigned long const&amp; std::__1::min[abi:v160006]&lt;unsigned long&gt; (1 samples, 0.05%)</title><rect x="99.7869%" y="373" width="0.0533%" height="15" fill="rgb(222,18,33)" fg:x="1873" fg:w="1"/><text x="100.0369%" y="383.50"></text></g><g><title>tiny`unsigned long const&amp; std::__1::min[abi:v160006]&lt;unsigned long, std::__1::__less&lt;unsigned long, unsigned long&gt;&gt;(unsigned long const&amp;, unsigned long const&amp;, std::__1::__less (1 samples, 0.05%)</title><rect x="99.7869%" y="357" width="0.0533%" height="15" fill="rgb(213,199,7)" fg:x="1873" fg:w="1"/><text x="100.0369%" y="367.50"></text></g><g><title>tiny`zmq::io_thread_t::in_event (2 samples, 0.11%)</title><rect x="99.7869%" y="485" width="0.1066%" height="15" fill="rgb(250,110,10)" fg:x="1873" fg:w="2"/><text x="100.0369%" y="495.50"></text></g><g><title>tiny`zmq::object_t::process_command (2 samples, 0.11%)</title><rect x="99.7869%" y="469" width="0.1066%" height="15" fill="rgb(248,123,6)" fg:x="1873" fg:w="2"/><text x="100.0369%" y="479.50"></text></g><g><title>tiny`zmq::pipe_t::process_activate_read (2 samples, 0.11%)</title><rect x="99.7869%" y="453" width="0.1066%" height="15" fill="rgb(206,91,31)" fg:x="1873" fg:w="2"/><text x="100.0369%" y="463.50"></text></g><g><title>tiny`zmq::session_base_t::read_activated (2 samples, 0.11%)</title><rect x="99.7869%" y="437" width="0.1066%" height="15" fill="rgb(211,154,13)" fg:x="1873" fg:w="2"/><text x="100.0369%" y="447.50"></text></g><g><title>tiny`zmq::stream_engine_base_t::restart_output (2 samples, 0.11%)</title><rect x="99.7869%" y="421" width="0.1066%" height="15" fill="rgb(225,148,7)" fg:x="1873" fg:w="2"/><text x="100.0369%" y="431.50"></text></g><g><title>tiny`zmq::stream_engine_base_t::out_event (2 samples, 0.11%)</title><rect x="99.7869%" y="405" width="0.1066%" height="15" fill="rgb(220,160,43)" fg:x="1873" fg:w="2"/><text x="100.0369%" y="415.50"></text></g><g><title>tiny`zmq::stream_engine_base_t::write (1 samples, 0.05%)</title><rect x="99.8402%" y="389" width="0.0533%" height="15" fill="rgb(213,52,39)" fg:x="1874" fg:w="1"/><text x="100.0902%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (1 samples, 0.05%)</title><rect x="99.8402%" y="373" width="0.0533%" height="15" fill="rgb(243,137,7)" fg:x="1874" fg:w="1"/><text x="100.0902%" y="383.50"></text></g><g><title>tiny`zmq::session_base_t::flush (1 samples, 0.05%)</title><rect x="99.8934%" y="453" width="0.0533%" height="15" fill="rgb(230,79,13)" fg:x="1875" fg:w="1"/><text x="100.1434%" y="463.50"></text></g><g><title>tiny`zmq::pipe_t::flush (1 samples, 0.05%)</title><rect x="99.8934%" y="437" width="0.0533%" height="15" fill="rgb(247,105,23)" fg:x="1875" fg:w="1"/><text x="100.1434%" y="447.50"></text></g><g><title>tiny`zmq::object_t::send_activate_read (1 samples, 0.05%)</title><rect x="99.8934%" y="421" width="0.0533%" height="15" fill="rgb(223,179,41)" fg:x="1875" fg:w="1"/><text x="100.1434%" y="431.50"></text></g><g><title>tiny`zmq::object_t::send_command (1 samples, 0.05%)</title><rect x="99.8934%" y="405" width="0.0533%" height="15" fill="rgb(218,9,34)" fg:x="1875" fg:w="1"/><text x="100.1434%" y="415.50"></text></g><g><title>tiny`zmq::ctx_t::send_command (1 samples, 0.05%)</title><rect x="99.8934%" y="389" width="0.0533%" height="15" fill="rgb(222,106,8)" fg:x="1875" fg:w="1"/><text x="100.1434%" y="399.50"></text></g><g><title>tiny`zmq::mailbox_t::send (1 samples, 0.05%)</title><rect x="99.8934%" y="373" width="0.0533%" height="15" fill="rgb(211,220,0)" fg:x="1875" fg:w="1"/><text x="100.1434%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (1 samples, 0.05%)</title><rect x="99.8934%" y="357" width="0.0533%" height="15" fill="rgb(229,52,16)" fg:x="1875" fg:w="1"/><text x="100.1434%" y="367.50"></text></g><g><title>all (1,877 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(212,155,18)" fg:x="0" fg:w="1877"/><text x="0.2500%" y="591.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (5 samples, 0.27%)</title><rect x="99.7336%" y="565" width="0.2664%" height="15" fill="rgb(242,21,14)" fg:x="1872" fg:w="5"/><text x="99.9836%" y="575.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_start (5 samples, 0.27%)</title><rect x="99.7336%" y="549" width="0.2664%" height="15" fill="rgb(222,19,48)" fg:x="1872" fg:w="5"/><text x="99.9836%" y="559.50"></text></g><g><title>tiny`thread_routine(void*) (5 samples, 0.27%)</title><rect x="99.7336%" y="533" width="0.2664%" height="15" fill="rgb(232,45,27)" fg:x="1872" fg:w="5"/><text x="99.9836%" y="543.50"></text></g><g><title>tiny`zmq::worker_poller_base_t::worker_routine (5 samples, 0.27%)</title><rect x="99.7336%" y="517" width="0.2664%" height="15" fill="rgb(249,103,42)" fg:x="1872" fg:w="5"/><text x="99.9836%" y="527.50"></text></g><g><title>tiny`zmq::kqueue_t::loop (4 samples, 0.21%)</title><rect x="99.7869%" y="501" width="0.2131%" height="15" fill="rgb(246,81,33)" fg:x="1873" fg:w="4"/><text x="100.0369%" y="511.50"></text></g><g><title>tiny`zmq::stream_engine_base_t::in_event (2 samples, 0.11%)</title><rect x="99.8934%" y="485" width="0.1066%" height="15" fill="rgb(252,33,42)" fg:x="1875" fg:w="2"/><text x="100.1434%" y="495.50"></text></g><g><title>tiny`zmq::stream_engine_base_t::in_event_internal (2 samples, 0.11%)</title><rect x="99.8934%" y="469" width="0.1066%" height="15" fill="rgb(209,212,41)" fg:x="1875" fg:w="2"/><text x="100.1434%" y="479.50"></text></g><g><title>tiny`zmq::stream_engine_base_t::decode_and_push (1 samples, 0.05%)</title><rect x="99.9467%" y="453" width="0.0533%" height="15" fill="rgb(207,154,6)" fg:x="1876" fg:w="1"/><text x="100.1967%" y="463.50"></text></g><g><title>tiny`zmq::session_base_t::push_msg (1 samples, 0.05%)</title><rect x="99.9467%" y="437" width="0.0533%" height="15" fill="rgb(223,64,47)" fg:x="1876" fg:w="1"/><text x="100.1967%" y="447.50"></text></g><g><title>tiny`zmq::pipe_t::write (1 samples, 0.05%)</title><rect x="99.9467%" y="421" width="0.0533%" height="15" fill="rgb(211,161,38)" fg:x="1876" fg:w="1"/><text x="100.1967%" y="431.50"></text></g><g><title>tiny`zmq::ypipe_t&lt;zmq::msg_t, 256&gt;::write (1 samples, 0.05%)</title><rect x="99.9467%" y="405" width="0.0533%" height="15" fill="rgb(219,138,40)" fg:x="1876" fg:w="1"/><text x="100.1967%" y="415.50"></text></g></svg></svg>